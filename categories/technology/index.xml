<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>technology on Richard&#39;s blog</title>
    <link>https://richard-chen93.github.io/categories/technology/</link>
    <description>Recent content in technology on Richard&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Feb 2021 21:51:41 +0800</lastBuildDate><atom:link href="https://richard-chen93.github.io/categories/technology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Prometheus监控ES集群</title>
      <link>https://richard-chen93.github.io/post/%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7es%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Sat, 06 Feb 2021 21:51:41 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E4%BD%BF%E7%94%A8prometheus%E7%9B%91%E6%8E%A7es%E9%9B%86%E7%BE%A4/</guid>
      <description>1、准备环境 监控系统下载运行prometheus和alertmanager，被监控的ES集群下载运行node_exporter和elasticsearch_exporter 2、修改配置 1、promet</description>
    </item>
    
    <item>
      <title>Linux搭建内网yum源</title>
      <link>https://richard-chen93.github.io/post/linux%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/</link>
      <pubDate>Mon, 25 Jan 2021 17:21:15 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/linux%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91yum%E6%BA%90/</guid>
      <description>1、安装yum工具 yum -y install createrepo 2、指定yum仓库路径 mkdir /repo 3、创建本地repo仓库 createrepo -pdo /repo /repo 4、清空或者备份出 /etc/yum.repos.d 下所有的源。 mv /etc/yum.repos.d/*.repo /tmp yum clean all 5、配置本地yum源 cat &amp;gt;&amp;gt; /etc/yum.repos.d/Centos-Base.repo &amp;lt;&amp;lt; EOF [centos7] name=CentOS7-local baseurl=file:///repo gpgcheck=0 enabled=1 EOF 6、测试 yum makecache yum -y install unzip</description>
    </item>
    
    <item>
      <title>Elasticsearch集群搭建</title>
      <link>https://richard-chen93.github.io/post/elasticsearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 24 Jan 2021 17:23:09 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/elasticsearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid>
      <description>1、环境 es版本： 7.8.1 centos7： s4,s5,s6 配置：4c 3G 3台机器必须调整最大进程数，root执行： echo &amp;quot;fs.file-max = 2000000&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf echo &amp;quot;vm.max_map_count = 655360&amp;quot; &amp;gt;&amp;gt; /etc/sysctl.conf sysctl -p echo &amp;quot;ulimit -u 10000&amp;quot; &amp;gt;&amp;gt; /etc/profile 2、配置 elasticsearch.yml配置文件。3台机器的nod</description>
    </item>
    
    <item>
      <title>Linux初始安装配置与系统调优</title>
      <link>https://richard-chen93.github.io/post/linux%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98/</link>
      <pubDate>Sun, 24 Jan 2021 16:43:05 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/linux%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98/</guid>
      <description>前言 centos7系统，最小化安装系统后：关闭防火墙和selinux、安装常用工具、设置yum源、创建普通用户admin、cephuser，设置ntp、系统和进程级别的文件句柄 1、一键搞定脚本 #!/bin/bash ##########optimize system cat</description>
    </item>
    
    <item>
      <title>Charles手机抓包</title>
      <link>https://richard-chen93.github.io/post/charles%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/</link>
      <pubDate>Wed, 20 Jan 2021 23:15:49 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/charles%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/</guid>
      <description>charles抓包工具的使用：手机抓包设置和安装证书 dufufd 2019-01-16 16:17:48 4645 收藏 4 分类专栏： Web http://www.cnblogs.com/cnhkzyy/p/9535030.html 一. 设置手机抓包 第一步：在charles里设置允许手机联网的权限，并设置接入接口 在Charles的菜单栏上选择&amp;quot</description>
    </item>
    
    <item>
      <title>Cassandra的安装、集群部署、监控</title>
      <link>https://richard-chen93.github.io/post/cassandra%E7%9A%84%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Wed, 20 Jan 2021 11:16:14 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/cassandra%E7%9A%84%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E7%9B%91%E6%8E%A7/</guid>
      <description>「已注销」 2017-11-22 15:18:45 2697 收藏 2 分类专栏： 随笔 文章标签： cassandra 集群 1、集群部署 一：前提 安装jdk1.8以上，python2.7 二：安装Cassandra Cassandra的下载地址：http://cassandra</description>
    </item>
    
    <item>
      <title>KVM虚拟机安装和常用操作</title>
      <link>https://richard-chen93.github.io/post/kvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E5%92%8C%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 18 Jan 2021 22:23:17 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/kvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E5%92%8C%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>1、centos7安装kvm 1、前提条件 2. 首先验证CPU是否支持虚拟化，输入有vmx或svm就支持，支持虚拟化则就支持KVM [root@openstack ~]# cat /proc/cpuinfo | egrep &#39;vmx|svm&#39; 3. 查看是否加载KVM [root@openstack ~]# lsmod | grep kvm kvm_intel 170086 0 kvm 566340 1 kvm_intel irqbypass 13503 1 kvm 这表明已</description>
    </item>
    
    <item>
      <title>CentOS7扩容根分区</title>
      <link>https://richard-chen93.github.io/post/centos7%E6%89%A9%E5%AE%B9%E6%A0%B9%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 17 Jan 2021 21:38:42 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/centos7%E6%89%A9%E5%AE%B9%E6%A0%B9%E5%88%86%E5%8C%BA/</guid>
      <description>CentOS7扩容根分区(LVM+非LVM) 神冰凰关注 0.6612018.06.14 14:11:25字数 312阅读 18,450 CentOS7，LVM根分区扩容步骤： 1.查看现有分区大小 df -TH LVM分区，磁盘总大小为20G,根分区总容量为17</description>
    </item>
    
    <item>
      <title>Ceph_12_luminous安装</title>
      <link>https://richard-chen93.github.io/post/ceph_12_luminous%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 14 Jan 2021 12:01:44 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/ceph_12_luminous%E5%AE%89%E8%A3%85/</guid>
      <description>0、利索的脚本： 前提： 3台机器上都配置好ceph源，并yum makecache。在ceph-deploy上安装ceph-deploy并执行下列脚本： #!/bin/bash cd cd mkdir my-cluster cd my-cluster ceph-deploy new s4 s5 s6 export CEPH_DEPLOY_REPO_URL=http://mirrors.tuna.tsinghua.edu.cn/ceph/rpm-luminous/el7 export CEPH_DEPLOY_GPG_URL=http://mirrors.tuna.tsinghua.edu.cn/ceph/keys/release.asc cat &amp;gt;&amp;gt; ./ceph.conf &amp;lt;&amp;lt; EOF public_network = 10.3.3.0/24 cluster_network =</description>
    </item>
    
    <item>
      <title>安装并监控memcached</title>
      <link>https://richard-chen93.github.io/post/%E5%AE%89%E8%A3%85%E5%B9%B6%E7%9B%91%E6%8E%A7memcached/</link>
      <pubDate>Tue, 12 Jan 2021 10:34:35 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E5%AE%89%E8%A3%85%E5%B9%B6%E7%9B%91%E6%8E%A7memcached/</guid>
      <description>1、安装httpd memcached php php-memcache sudo yum -y install httpd memcached php php-memcache 2、配置php-memcache扩展 Note： 是memcache，而不是memcached vim /etc/php.ini #末尾添加如下配置 extension_dir = “/usr/lib64/php/module</description>
    </item>
    
    <item>
      <title>Mysql常用操作</title>
      <link>https://richard-chen93.github.io/post/mysql%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 12 Jan 2021 10:30:40 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/mysql%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>安装完初始化： mysql_secure_installation 创建用户 CREATE USER &#39;panda&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;panda&#39;; 允许其他IP访问数据库 %代表任意IP GRANT ALL PRIVILEGES ON *.* TO &#39;panda&#39;@&#39;%&#39; IDENTIFIED BY &#39;panda&#39; WITH GRANT OPTION; flush privileges; 创建数据库表 CREATE TABLE IF NOT EXISTS `runoob_tbl`( `runoob_id` INT UNSIGNED AUTO_INCREMENT, `runoob_title` VARCHAR(100) NOT NULL, `runoob_author` VARCHAR(40) NOT NULL, `submission_date` DATE, PRIMARY KEY ( `runoob_id` ) )ENGINE=InnoDB DEFAULT CHARSET=utf8; 修改root密码 使用自动生成的</description>
    </item>
    
    <item>
      <title>Ceph集群部署</title>
      <link>https://richard-chen93.github.io/post/ceph%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 12 Jan 2021 10:27:48 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/ceph%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</guid>
      <description>1、环境准备 环境准备好，避免踩坑！ 4台机器，s10为ceph-deploy。 s7 s8 s9为3个node，拥有空闲磁盘sdb，10G ceph-deploy &amp;ndash;version 1.5.39 ceph version 10.2.11 1、时间同步 s7作为ntp服务器，s8-10作为客户端 sudo yum -y install</description>
    </item>
    
    <item>
      <title>内网ntp时间服务器搭建</title>
      <link>https://richard-chen93.github.io/post/%E5%86%85%E7%BD%91ntp%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sun, 03 Jan 2021 20:57:51 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E5%86%85%E7%BD%91ntp%E6%97%B6%E9%97%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</guid>
      <description>安装NPT（所有节点） 配置了ntp启动正常，设置开机自启，发现重启后启动不起来，且无任何报错？ 坑爹！disable 和stop chronyd ! 我们建议在所有 Ceph 节点上安装 NTP 服务，以免因时钟漂移导致故障。 sudo yum install ntp ntpdate 1.</description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>https://richard-chen93.github.io/post/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 25 Dec 2020 10:25:09 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>查看cpu信息 [root@AAA ~]# cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 24 Intel(R) Xeon(R) CPU E5-2630 0 @ 2.30GHz # 查看物理CPU个数 [root@AAA ~]# cat /proc/cpuinfo| grep &amp;quot;physical id&amp;quot;| sort| uniq| wc -l 2 # 查看每个物理CPU中core的个数(即核数) [root@AAA ~]# cat /proc/cpuinfo| grep &amp;quot;cpu cores&amp;quot;| uniq cpu cores : 6 # 查看逻辑CPU的个数 [root@AAA ~]# cat</description>
    </item>
    
    <item>
      <title>Mysql故障记录</title>
      <link>https://richard-chen93.github.io/post/mysql%E6%95%85%E9%9A%9C%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 07 Dec 2020 11:12:10 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/mysql%E6%95%85%E9%9A%9C%E8%AE%B0%E5%BD%95/</guid>
      <description>OS和mysql版本 mysql5.7、centos7 报错记录 mysql启动失败，报错 The server quit without updating PID file！ 修改启动脚本 /etc/init.d/mysqld 约278行，增加&amp;ndash;user=root参数 $bindir/mysqld_safe &amp;ndash;user=root &amp;ndash;datadir=&amp;quot;$datadir&amp;quot; &amp;ndash;pid-file=&amp;quot;$mysqld_pid_file_path&amp;quot; $other_args &amp;gt;/dev/null &amp;amp; 确保/etc/</description>
    </item>
    
    <item>
      <title>Centos7单机离线部署ceph及cephFS文件系统使用</title>
      <link>https://richard-chen93.github.io/post/centos7%E5%8D%95%E6%9C%BA%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2ceph%E5%8F%8Acephfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 01 Dec 2020 12:56:16 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/centos7%E5%8D%95%E6%9C%BA%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2ceph%E5%8F%8Acephfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8/</guid>
      <description>一、实验背景 1. 内网环境下，无法连接互联网，需要搭建ceph，为分布式集群提供ceph文件系统 2. 要实现脚本的自动化安装，shell脚本或者ansible playbook，不使用ceph-deploy工具</description>
    </item>
    
    <item>
      <title>Kafka与zookeeper的安装配置</title>
      <link>https://richard-chen93.github.io/post/kafka%E4%B8%8Ezookeeper%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 26 Nov 2020 18:47:39 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/kafka%E4%B8%8Ezookeeper%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>1、kafka架构图及下载 https://archive.apache.org/dist/kafka/0.11.0.0/kafka_2.11-0.11.0.0.tgz 此外，java安装并配置好环境变量。 2、修改kafka配置文件 vim ./config/server.properties broker.id=0 #每个broker的唯一标识，不可重复 delete.topic.enable=true #允许删除topic log.dirs=/root/kafka/logs #出于安全考虑，修改默认log位置。kaf</description>
    </item>
    
    <item>
      <title>About_ElasticSearch</title>
      <link>https://richard-chen93.github.io/post/about_elasticsearch/</link>
      <pubDate>Tue, 24 Nov 2020 15:06:06 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/about_elasticsearch/</guid>
      <description>下载、校验 wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.0.2.tar.gz sha1sum elasticsearch-5.0.2.tar.gz tar -xzf elasticsearch-5.0.2.tar.gz cd elasticsearch-5.0.2/ ./bin/elasticsearch 验证 curl localhost:9200 { &amp;ldquo;name&amp;rdquo; : &amp;ldquo;Cp8oag6&amp;rdquo;, &amp;ldquo;cluster_name&amp;rdquo; : &amp;ldquo;elasticsearch&amp;rdquo;, &amp;ldquo;cluster_uuid&amp;rdquo; : &amp;ldquo;AT69_T_DTp-1qgIJlatQqA&amp;rdquo;, &amp;ldquo;version&amp;rdquo; : { &amp;ldquo;number&amp;rdquo; : &amp;ldquo;5.0.2&amp;rdquo;, &amp;ldquo;build_hash&amp;rdquo; : &amp;ldquo;f27399d&amp;rdquo;, &amp;ldquo;build_date&amp;rdquo; : &amp;ldquo;2016-03-30T09:51:41.449Z&amp;rdquo;, &amp;ldquo;build_snapshot&amp;rdquo; : false, &amp;ldquo;lucene_version&amp;rdquo; : &amp;ldquo;6.2.1&amp;rdquo; }, &amp;ldquo;tagline&amp;rdquo; : &amp;ldquo;You Know, for Search&amp;rdquo; } Running as a daemon ./bin/elasticsearch -d -p pid shutdown ES kill cat pid kibana 相关 kinaba允许远程访问，配置文件中这里localhost</description>
    </item>
    
    <item>
      <title>Vim常见用法和配置</title>
      <link>https://richard-chen93.github.io/post/vim%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 21 Nov 2020 22:18:50 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/vim%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>vim tab改为4个空格 cat &amp;gt;&amp;gt; /etc/vimrc &amp;lt;&amp;lt; EOF set ts=4 set expandtab set autoindent EOF</description>
    </item>
    
    <item>
      <title>安装部署prometheus</title>
      <link>https://richard-chen93.github.io/post/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2prometheus/</link>
      <pubDate>Fri, 20 Nov 2020 13:24:36 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2prometheus/</guid>
      <description>环境准备 3台机器centos7，1台prometheus服务器，主机名S0，1台grafana服务器S1，1台客户端S2 prometheus版本为prometheus-2.5.0.linux-amd6</description>
    </item>
    
    <item>
      <title>Docker常用操作</title>
      <link>https://richard-chen93.github.io/post/docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 13 Nov 2020 23:07:07 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>docker以host模式启动容器，并指定名称和共享盘 docker container run -it &amp;ndash;name mhost &amp;ndash;privileged=true &amp;ndash;net=host -p 8000:80 -v /mhost_volume:/data/ {docker image id} 进入容器 [root@localhost ~]# docker exec -it bash 进入后发现没有ifconfig，直接yum安装 ifconfig报错 yum install -y net-tools 常用参数含义 it ：互动模</description>
    </item>
    
    <item>
      <title>Harbor搭建与使用</title>
      <link>https://richard-chen93.github.io/post/harbor%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 13 Nov 2020 22:48:36 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/harbor%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>安装 harbor支持k8s的helm安装和本地安装，这里使用本地安装。 1. 前置条件 1.1安装docker并运行 yum install docker systemcal start docker systemctl enable docker 2. 安装docker-compost 2.1安装依赖包 2.1 yum install -y py-pip python-dev libffi-dev openssl-dev gcc libc-dev make 2.2</description>
    </item>
    
    <item>
      <title>使用ansible批量管理windows服务器</title>
      <link>https://richard-chen93.github.io/post/%E4%BD%BF%E7%94%A8ansible%E6%89%B9%E9%87%8F%E7%AE%A1%E7%90%86windows%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Fri, 13 Nov 2020 21:27:02 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E4%BD%BF%E7%94%A8ansible%E6%89%B9%E9%87%8F%E7%AE%A1%E7%90%86windows%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>前提 windows被控端防火墙信任规则，允许5985端口通过。 对于旧版本windows 服务器需要 安装Framework 3.0+ 更改powershell策略为remotesigned 升级PowerShell至</description>
    </item>
    
    <item>
      <title>自动化运维工具puppet简单使用说明</title>
      <link>https://richard-chen93.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7puppet%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Fri, 13 Nov 2020 21:27:02 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7puppet%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>目录 一、此实验中puppet的运行环境 1. 硬件清单 2. 软件清单 3. 准备yum源 4. 配置域名解析 5. Ntp时间同步 二、puppet安装配置过程 1. Puppet master安装配置 2. Puppet node安装配置 3. 分配证书，开启PUPPE</description>
    </item>
    
    <item>
      <title>ssh</title>
      <link>https://richard-chen93.github.io/post/ssh/</link>
      <pubDate>Thu, 29 Oct 2020 18:43:21 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/ssh/</guid>
      <description>linux更改 ssh 私钥 Passphrase $ cd ~/.ssh $ ssh-keygen -f id_rsa -p ssh连接速度慢 修改sshd_config文件： UseDNS no GSSAPIAuthentication no 实现免密登陆 1、在客户端生成密钥对,默认在~/.ssh文件夹下 ssh-keygen 2、将公钥上传到服务器 ssh-copy-id root@10.0.0.1 3、验证。</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://richard-chen93.github.io/post/docker-compose%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 29 Oct 2020 18:40:08 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/docker-compose%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>docker-compose 1.安装扩展源 sudo yum -y install epel-release 2.安装python-pip模块 sudo yum install python-pip 3.查看docker-compose版本 docker-compose version 提示未找到命令 4.通过命令进行安装 cd /usr/local/bin/ wget https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-Linux-x86_64 rename docker-compose-Linux-x86_64 docker-compose docker-compose-Linux-x86_64 chmod +x /usr/local/bin/docker-compose 5.再通过docker-compo</description>
    </item>
    
    <item>
      <title>git Submodule</title>
      <link>https://richard-chen93.github.io/post/submodule%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 29 Oct 2020 17:48:08 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/submodule%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>Git中submodule的使用 面对比较复杂的项目，我们有可能会将代码根据功能拆解成不同的子模块。主项目对子模块有依赖关系，却又并不关心子模块的内部开发流程细节。 这种情况下，通常不会把所有源码都放在同</description>
    </item>
    
    <item>
      <title>Hugo基本用法</title>
      <link>https://richard-chen93.github.io/post/hugo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Wed, 28 Oct 2020 10:29:18 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/hugo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>hugo本地创建、更新、删除文章后同步到gitpage的基本流程： 前提环境： public目录位于blog目录下，属于blog的子仓库submodule 使用命令 git submodule status可看到 注意 写文章后直接sh</description>
    </item>
    
    <item>
      <title>Deploy Hugo Site_on Github Pages</title>
      <link>https://richard-chen93.github.io/post/deploy-hugo-site_on-github-pages/</link>
      <pubDate>Tue, 27 Oct 2020 18:16:10 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/deploy-hugo-site_on-github-pages/</guid>
      <description>将hugo静态博客网页部署到github上 1、选择gitpage的类型 2种github page：个人、项目。这里选个人。 2、建立gitpage和hugo代码仓库 在github上以自己的用户名+gith</description>
    </item>
    
    <item>
      <title>Git常见错误汇总</title>
      <link>https://richard-chen93.github.io/post/git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 27 Oct 2020 18:15:05 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</guid>
      <description>1 无法push A git directory for &amp;lsquo;public&amp;rsquo; is found locally with remote(s): origin https://github.com/richard-chen93/.........git If you want to reuse this local git directory instead of cloning again from https://github.com/richard-chen93/......git use the &amp;lsquo;&amp;ndash;force&amp;rsquo; option. If the local git directory is not the correct repo or you are unsure what this means choose another name with the &amp;lsquo;&amp;ndash;name&amp;rsquo; option. 删除.git\modules 的 public 2 git push时总让输入密码 git push的时候每</description>
    </item>
    
  </channel>
</rss>
