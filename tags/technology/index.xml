<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>technology on Richard&#39;s blog</title>
    <link>https://richard-chen93.github.io/tags/technology/</link>
    <description>Recent content in technology on Richard&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 21 Nov 2020 22:18:50 +0800</lastBuildDate><atom:link href="https://richard-chen93.github.io/tags/technology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vim常见用法和配置</title>
      <link>https://richard-chen93.github.io/post/vim%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 21 Nov 2020 22:18:50 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/vim%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>vim tab改为4个空格 vim /etc/vim/vimrc set ts=4 set expandtab set autoindent</description>
    </item>
    
    <item>
      <title>安装部署prometheus</title>
      <link>https://richard-chen93.github.io/post/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2prometheus/</link>
      <pubDate>Fri, 20 Nov 2020 13:24:36 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2prometheus/</guid>
      <description>环境准备 3台机器centos7，1台prometheus服务器，主机名S0，1台grafana服务器S1，1台客户端S2 prometheus版本为prometheus-2.5.0.linux-amd6</description>
    </item>
    
    <item>
      <title>Docker常用操作</title>
      <link>https://richard-chen93.github.io/post/docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 13 Nov 2020 23:07:07 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>docker以host模式启动容器，并指定名称和共享盘 docker container run -it &amp;ndash;name mhost &amp;ndash;privileged=true &amp;ndash;net=host -p 8000:80 -v /mhost_volume:/data/ {docker image id} 进入容器 [root@localhost ~]# docker exec -it bash 进入后发现没有ifconfig，直接yum安装 ifconfig报错 yum install -y net-tools 常用参数含义 it ：互动模</description>
    </item>
    
    <item>
      <title>Harbor搭建与使用</title>
      <link>https://richard-chen93.github.io/post/harbor%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 13 Nov 2020 22:48:36 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/harbor%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>安装 harbor支持k8s的helm安装和本地安装，这里使用本地安装。 1. 前置条件 1.1安装docker并运行 yum install docker systemcal start docker systemctl enable docker 2. 安装docker-compost 2.1安装依赖包 2.1 yum install -y py-pip python-dev libffi-dev openssl-dev gcc libc-dev make 2.2</description>
    </item>
    
    <item>
      <title>使用ansible批量管理windows服务器</title>
      <link>https://richard-chen93.github.io/post/%E4%BD%BF%E7%94%A8ansible%E6%89%B9%E9%87%8F%E7%AE%A1%E7%90%86windows%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Fri, 13 Nov 2020 21:27:02 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E4%BD%BF%E7%94%A8ansible%E6%89%B9%E9%87%8F%E7%AE%A1%E7%90%86windows%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>前提 windows被控端防火墙信任规则，允许5985端口通过。 对于旧版本windows 服务器需要 安装Framework 3.0+ 更改powershell策略为remotesigned 升级PowerShell至</description>
    </item>
    
    <item>
      <title>自动化运维工具puppet简单使用说明</title>
      <link>https://richard-chen93.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7puppet%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Fri, 13 Nov 2020 21:27:02 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7puppet%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>目录 一、此实验中puppet的运行环境 1. 硬件清单 2. 软件清单 3. 准备yum源 4. 配置域名解析 5. Ntp时间同步 二、puppet安装配置过程 1. Puppet master安装配置 2. Puppet node安装配置 3. 分配证书，开启PUPPE</description>
    </item>
    
    <item>
      <title>各种阿里云加速器</title>
      <link>https://richard-chen93.github.io/post/%E5%90%84%E7%A7%8D%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F%E5%99%A8/</link>
      <pubDate>Fri, 30 Oct 2020 09:00:58 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/%E5%90%84%E7%A7%8D%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F%E5%99%A8/</guid>
      <description>yum centos7: wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo sed -i -e &#39;/mirrors.cloud.aliyuncs.com/d&#39; -e &#39;/mirrors.aliyuncs.com/d&#39; /etc/yum.repos.d/CentOS-Base.repo yum makecache yum -y install epel-release pip: pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ pip install django-bootstrap3==6.2.2 -i http://mirrors.aliyun.com/pypi/simple --trusted-host=mirrors.aliyun.com Mac: 修改 pip.conf 文件 vim $HOME/Library/Application Support/pip/pip.conf 如果没有上面的目录,在如下目录创建 pip.conf $HOME/.config/pip/pip.conf 修改内容如下： [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple12 Windows: 修改 pip.conf 文件 (没有就创建一个) %APPDATA%\pip\pip.ini 修改内容如下： [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple doc</description>
    </item>
    
    <item>
      <title>ssh</title>
      <link>https://richard-chen93.github.io/post/ssh/</link>
      <pubDate>Thu, 29 Oct 2020 18:43:21 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/ssh/</guid>
      <description>linux更改 ssh 私钥 Passphrase $ cd ~/.ssh $ ssh-keygen -f id_rsa -p ssh连接速度慢 修改sshd_config文件： UseDNS no GSSAPIAuthentication no 实现免密登陆 1、在客户端生成密钥对,默认在~/.ssh文件夹下 ssh-keygen 2、将公钥上传到服务器 ssh-copy-id root@10.0.0.1 3、验证。</description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://richard-chen93.github.io/post/docker-compose%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 29 Oct 2020 18:40:08 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/docker-compose%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>docker-compose 1.安装扩展源 sudo yum -y install epel-release 2.安装python-pip模块 sudo yum install python-pip 3.查看docker-compose版本 docker-compose version 提示未找到命令 4.通过命令进行安装 cd /usr/local/bin/ wget https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-Linux-x86_64 rename docker-compose-Linux-x86_64 docker-compose docker-compose-Linux-x86_64 chmod +x /usr/local/bin/docker-compose 5.再通过docker-compo</description>
    </item>
    
    <item>
      <title>git Submodule</title>
      <link>https://richard-chen93.github.io/post/submodule%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 29 Oct 2020 17:48:08 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/submodule%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>Git中submodule的使用 面对比较复杂的项目，我们有可能会将代码根据功能拆解成不同的子模块。主项目对子模块有依赖关系，却又并不关心子模块的内部开发流程细节。 这种情况下，通常不会把所有源码都放在同</description>
    </item>
    
    <item>
      <title>Hugo基本用法</title>
      <link>https://richard-chen93.github.io/post/hugo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Wed, 28 Oct 2020 10:29:18 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/hugo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>hugo本地创建、更新、删除文章后同步到gitpage的基本流程： 前提环境： public目录位于blog目录下，属于blog的子仓库submodule 使用命令 git submodule status可看到 注意 写文章后直接sh</description>
    </item>
    
    <item>
      <title>Deploy Hugo Site_on Github Pages</title>
      <link>https://richard-chen93.github.io/post/deploy-hugo-site_on-github-pages/</link>
      <pubDate>Tue, 27 Oct 2020 18:16:10 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/deploy-hugo-site_on-github-pages/</guid>
      <description>将hugo静态博客网页部署到github上 1、选择gitpage的类型 2种github page：个人、项目。这里选个人。 2、建立gitpage和hugo代码仓库 在github上以自己的用户名+gith</description>
    </item>
    
    <item>
      <title>Git常见错误汇总</title>
      <link>https://richard-chen93.github.io/post/git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 27 Oct 2020 18:15:05 +0800</pubDate>
      
      <guid>https://richard-chen93.github.io/post/git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/</guid>
      <description>1 无法push A git directory for &amp;lsquo;public&amp;rsquo; is found locally with remote(s): origin https://github.com/richard-chen93/.........git If you want to reuse this local git directory instead of cloning again from https://github.com/richard-chen93/......git use the &amp;lsquo;&amp;ndash;force&amp;rsquo; option. If the local git directory is not the correct repo or you are unsure what this means choose another name with the &amp;lsquo;&amp;ndash;name&amp;rsquo; option. 删除.git\modules 的 public 2 git push时总让输入密码 git push的时候每</description>
    </item>
    
  </channel>
</rss>
