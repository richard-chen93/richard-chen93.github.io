[{"content":"docker以host模式启动容器，并指定名称和共享盘 docker container run -it \u0026ndash;name mhost \u0026ndash;privileged=true \u0026ndash;net=host -p 8000:80 -v /mhost_volume:/data/ {docker image id}\n进入容器 [root@localhost ~]# docker exec -it bash 进入后发现没有ifconfig，直接yum安装 ifconfig报错 yum install -y net-tools\n常用参数含义  it ：互动模式登录容器，并分配一个终端 name ：指定容器名称 p ：小p指定容器的80端口映射为宿主机的7879端口。 rm ：表示退出容器时，容器一起删除 v ：指定volumes，格式为： 宿主机共享目录：容器目录 ，这样宿主机的/ken目录就被挂载到了容器的/data/目录下了 \u0026ndash; privileged=true: 使共享的目录可以访问  将容器打包成镜像 docker commit \u0026ndash;change=\u0026lsquo;CMD [\u0026quot;/auto_sshd.sh\u0026quot;]\u0026rsquo; -c \u0026ldquo;EXPOSE 22\u0026rdquo; test-centos1 centos_sshd:7.0 命令注释： \u0026ndash;change : 将后期使用此镜像运行容器时的命令参数、开放的容器端口提前设置好。\n打包镜像到tar包 docker save -o centos7_django_mhost_v1.2.tar centos7_django_mhost_v1.2\n解压tar包到image docker load -i {image_name}.tar\n","date":"2020-11-13","permalink":"https://richard-chen93.github.io/post/docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","tags":null,"title":"Docker常用操作"},{"content":"安装 harbor支持k8s的helm安装和本地安装，这里使用本地安装。\n1.\t前置条件 1.1安装docker并运行 yum install docker systemcal start docker systemctl enable docker\n2.\t安装docker-compost 2.1安装依赖包 2.1 yum install -y py-pip python-dev libffi-dev openssl-dev gcc libc-dev make\n2.2 curl\t-L \u0026ldquo;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\u0026rdquo; -o /usr/local/bin/docker-compose\n2.3 chmod +x /usr/local/bin/docker-compose\n3.\t下载安装包 https://github.com/goharbor/harbor/releases tar xf harbor-offline-installer-v1.10.0.tgz\n4.\t修改配置文件 harbor.cfg 4.1修改hostname选项 hostname = A.B.C.D # 写你自己的网址或IP，公网访问要写公网IP 4.2支持Http 访问 customize_crt = false #新版中可能没有这项 注释掉https 4.3运行 4.3.1修改完配置文件后，运行 ./prepare，它会哪所配置文件修改一文件 如果是offline版的目录中有打包的image文件 docker load -i harbor.v1.10.0.tar.gz 4.3.2运行 ./install.sh 运行成功，docker container ls 查看，可以看到服务已经起来了。 docker container ls\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES da7981437516 goharbor/harbor-jobservice:v1.10.0 \u0026quot;/harbor/harbor_jobs…\u0026quot; 39 seconds ago Up 35 seconds (healthy) harbor-jobservice 534f615a8b49 goharbor/nginx-photon:v1.10.0 \u0026quot;nginx -g 'daemon of…\u0026quot; 39 seconds ago Up 34 seconds (healthy) 0.0.0.0:80-\u0026gt;8080/tcp nginx 6115684ab10b goharbor/harbor-core:v1.10.0 \u0026quot;/harbor/harbor_core\u0026quot; 40 seconds ago Up 38 seconds (healthy) harbor-core db6b18042976 goharbor/harbor-registryctl:v1.10.0 \u0026quot;/home/harbor/start.…\u0026quot; 43 seconds ago Up 40 seconds (healthy) registryctl 63c70e50cd7f goharbor/registry-photon:v2.7.1-patch-2819-2553-v1.10.0 \u0026quot;/home/harbor/entryp…\u0026quot; 43 seconds ago Up 39 seconds (healthy) 5000/tcp registry 46e4a59d052b goharbor/harbor-db:v1.10.0 \u0026quot;/docker-entrypoint.…\u0026quot; 43 seconds ago Up 40 seconds (healthy) 5432/tcp harbor-db 4ced2cd0ee8f goharbor/harbor-portal:v1.10.0 \u0026quot;nginx -g 'daemon of…\u0026quot; 43 seconds ago Up 39 seconds (healthy) 8080/tcp harbor-portal 691ab7bfb4bf goharbor/redis-photon:v1.10.0 \u0026quot;redis-server /etc/r…\u0026quot; 43 seconds ago Up 40 seconds (healthy) 6379/tcp redis 3431bbc1606e goharbor/harbor-log:v1.10.0 \u0026quot;/bin/sh -c /usr/loc…\u0026quot; 45 seconds ago Up 42 seconds (healthy) 127.0.0.1:1514-\u0026gt;10514/tcp harbor-log  常用管理命令 •\t停止服务： docker-compose stop •\t开始服务： docker-compose start Web登入 http://192.168.3.200 默认账号admin 密码Harbor12345 通过安装包中的harbor.yml 修改docker配置 docker 默认是按 https 请求的，由于我搭的私有库是 http 的，所以需要修改 docker 配置，将信任的库的地址写上 修改文件 /etc/docker/daemon.json { \u0026ldquo;insecure-registries\u0026rdquo;: [ \u0026ldquo;192.168.3.200\u0026rdquo; ] } systemctl restart docker 制作镜像 将 mongo 制作成一个私有镜像， mongo 为我之前从 docker hub 上拉取的镜像。 docker tag mongo A.B.C.D/ainirobot/nebulae_mongo:0.0.1\n上传镜像  先登陆私有库 docker login A.B.C.D PUSH docker push A.B.C.D/ainirobot/nebulae_mongo:0.0.1  ","date":"2020-11-13","permalink":"https://richard-chen93.github.io/post/harbor%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8/","tags":null,"title":"Harbor搭建与使用"},{"content":"前提  windows被控端防火墙信任规则，允许5985端口通过。 对于旧版本windows 服务器需要 安装Framework 3.0+ 更改powershell策略为remotesigned 升级PowerShell至3.0+ 设置Windows远端管理，英文全称WS-Management（WinRM）  windows被控端设置： get-executionpolicy set-executionpolicy remotesigned winrm quickconfig -force winrm enumerate winrm/config/listener winrm e winrm/config/listener winrm set winrm/config/service/auth '@{Basic=\u0026quot;true\u0026quot;}' winrm set winrm/config/service '@{AllowUnencrypted=\u0026quot;true\u0026quot;}'  命令解释：  0.打开服务器运行脚本功能： 1 winrm service 默认都是未启用的状态，先查看状态；如无返回信息，则是没有启动；如果没启动，则打开 计算机管理\u0026gt;服务：启用 WRM服务 并设置为自动运行 2 针对winrm service 进行基础配置： 3 查看winrm service listener: 4 为winrm service 配置auth: 5 为winrm service 配置加密方式为允许非加密： 6 至此，winrm service 已经启用，可以正常使用；但是步骤4和5在windows重启后会失效，大概3分钟后会恢复，因为winrm服务默认设置为延迟启动。  linux控制端设置： yum -y install ansible yum -y install python-pip pip install --upgrade pip --trusted-host 10.193.194.101 pip install pywinrm --trusted-host 10.193.200.6 python -m pip install paramiko PyYAML Jinja2 httplib2 six  linux控制端添加被控主机清单，运行playbook剧本操作被控主机 vim /etc/ansible/hosts [Win_server] 192.168.1.105 ansible_ssh_user=\u0026quot;Administrator\u0026quot; ansible_ssh_pass=\u0026quot;123456\u0026quot; ansible_ssh_port=5985 ansible_connection=\u0026quot;winrm\u0026quot; ansible_winrm_server_cert_validation=ignore  ansible tserver -m win_ping vim /root/test.yml --- - hosts: tserver tasks: - name: push scripts win_copy : src=/root/config_disk.ps1 dest=C:\\\\config_disk.ps1 remote_user: Administrator - name: run scripts win_shell : C:\\config_disk.ps1 remote_user: Administrator  其他备注  vmwar虚拟机模板策略中，设置windows策略时，以下两条命令无效：  winrm set winrm/config/service/auth '@{Basic=\u0026quot;true\u0026quot;}' winrm set winrm/config/service '@{AllowUnencrypted=\u0026quot;true\u0026quot;}'  ","date":"2020-11-13","permalink":"https://richard-chen93.github.io/post/%E4%BD%BF%E7%94%A8ansible%E6%89%B9%E9%87%8F%E7%AE%A1%E7%90%86windows%E6%9C%8D%E5%8A%A1%E5%99%A8/","tags":null,"title":"使用ansible批量管理windows服务器"},{"content":"目录  一、此实验中puppet的运行环境 1. 硬件清单 2. 软件清单 3. 准备yum源 4. 配置域名解析 5. Ntp时间同步 二、puppet安装配置过程 1. Puppet master安装配置 2. Puppet node安装配置 3. 分配证书，开启PUPPET服务 三、 申报站点清单中的资源，测试PUPPET能否工作。  正文 一、此实验中puppet的运行环境 1. 硬件清单  puppet master：4cpu，8G memory，1TB ssd puppet node1：4cpu，8G memory，500GB ssd  2. 软件清单 master\n 主机名: pmaster.cn04-corp.int OS: centos 7.6 puppet-master版本：3.6.2 ip：10.193.194.102  node\n 主机名: pnode1.cn04-corp.int OS: centos 7.6 puppet-master版本：3.6.2 ip：10.193.194.105  3. 准备yum源 Yum源服务器已配置好，可直接使用脚本配置到本地：\nwget http://10.193.200.6/yum.sh sh yum.sh  4. 配置域名解析 Puppet系统需要主机名或ip来标识master和node，目前两台机器均使用hosts文件做域名解析。\ncat /etc/hosts 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 10.193.194.102 pmaster.cn04-corp.int 10.193.194.105 pnode1.cn04-corp.int  5. Ntp时间同步 puppet master和node之间需要时间同步，Ntp服务器位于10.193.202.1。 puppet master和node都需要安装ntp服务并配置。\nyum install ntp vim /etc/ntp.conf  ntp配置文件里注释掉原有ntp服务器并添加10.193.202.1\n# Use public servers from the pool.ntp.org project. # Please consider joining the pool (http://www.pool.ntp.org/join.html). #server 0.centos.pool.ntp.org iburst #server 1.centos.pool.ntp.org iburst #server 2.centos.pool.ntp.org iburst #server 3.centos.pool.ntp.org iburst server 10.193.202.1 iburst vim /etc/ntp/step-tickers #0.centos.pool.ntp.org\t#注释掉 systemctl enable ntpd\t#开机自启ntp服务 systemctl start ntpd\t#启动ntp服务 ntpq -p\t#查看ntp服务器列表 date\t#查看时间是否一致  二、puppet安装配置过程 1. Puppet master安装配置 Yum install puppet-server\t#安装 Vim /etc/puppet/puppet.conf\t#修改配置文件 [agent]\t#这里添加server和certname server = pmaster.cn04-corp.int certname = pmaster.cn04-corp.int [master]\t#这里新建【master】，添加certname certname = pmaster.cn04-corp.int  2. Puppet node安装配置 Yum install puppet #安装pupet agent Vim /etc/puppet/puppet.conf\t#修改配置文件，添加以下master和certname [agent] server = pmaster.cn04-corp.int\t#指定master，这里是主机名 certname = pnode1.cn04-corp.int\t#指定node的证书名 runinterval = 60\t#设定agent请求catalog的间隔，这里是60秒。  3. 分配证书，开启PUPPET服务 在Node1上，输入以下命令向Master申请证书：\nPuppet agent -t  Master上查看待签发的证书,然后签发：\nPuppet cert list Puppet cert --sign pnode1.cn04-corp.int  三、 申报站点清单中的资源，测试PUPPET能否工作。 1. 开启puppet服务 Master：\nSystemctl enable puppetmaster Systemctl start puppetmaster  Node1：\nSystemctl enable puppet Systemctl start puppet  2. 申报站点清单中的资源，测试puppet能否工作。 Master上建立站点清单，位于/etc/puppet/manifest/site.pp 编辑site.pp，进行资源申报：\nvim /etc/puppet/manifest/site.pp node pnode1{\t#节点的主机名pnode1，不需要带域名.cn04-corp.int file {'test':\t#申报文件资源’test’，并定义各种状态 path=\u0026gt;'/root/test.txt', owner=\u0026gt;'root', group=\u0026gt;'root', mode=\u0026gt;'644', content=\u0026gt;'puppet system works!', } exec {'test shell scripts':\t#申报命令资源‘test shell scripts’，并定义各种状态 path=\u0026gt;'/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin', command=\u0026gt;'sh /root/sh/test.sh', user=\u0026gt;root, group=\u0026gt;root, } }  Node1 上设定了agent请求catalog的间隔为1分钟，若需立即执行，可用命令：\nPuppet agent -t  Node1执行完毕此命令后，查看Master的site.pp中定义的资源状态是否存在。\n[root@pnode1 ~]# ls /root/*.txt /root/name.txt /root/test.txt [root@pnode1 ~]#  存在说明puppet工作正常。\n附录 站点清单文件示例 文件名 site.pp 内容：\nnode pnode1{ file {'test': path=\u0026gt;'/root/test.txt', owner=\u0026gt;'root', group=\u0026gt;'root', mode=\u0026gt;'644', content=\u0026gt;'puppet system works!', } file {'test01': path=\u0026gt;'/root/test01.txt', owner=\u0026gt;'root', group=\u0026gt;'root', mode=\u0026gt;'644', content=\u0026gt;'puppet system works!', } exec {'test shell scripts': path=\u0026gt;'/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin', command=\u0026gt;'sh /root/sh/test.sh', user=\u0026gt;root, group=\u0026gt;root, } exec {'test command': path=\u0026gt;'/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin', command=\u0026gt;'touch /root/exec.txt', user=\u0026gt;root, group=\u0026gt;root, } }  ","date":"2020-11-13","permalink":"https://richard-chen93.github.io/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7puppet%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","tags":null,"title":"自动化运维工具puppet简单使用说明"},{"content":"yum centos7:\nwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo yum makecache  pip: pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ pip install django-bootstrap3==6.2.2 -i http://mirrors.aliyun.com/pypi/simple --trusted-host=mirrors.aliyun.com  Mac: 修改 pip.conf 文件\nvim $HOME/Library/Application Support/pip/pip.conf  如果没有上面的目录,在如下目录创建 pip.conf\n$HOME/.config/pip/pip.conf\n修改内容如下：\n[global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple12  Windows: 修改 pip.conf 文件 (没有就创建一个)\n%APPDATA%\\pip\\pip.ini\n修改内容如下：\n[global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple  docker： Ubuntu 16.04+、Debian 8+、CentOS 7+ 创建或修改 /etc/docker/daemon.json：\nsudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-'EOF' { \u0026quot;registry-mirrors\u0026quot;: [ \u0026quot;https://1nj0zren.mirror.aliyuncs.com\u0026quot;, \u0026quot;https://docker.mirrors.ustc.edu.cn\u0026quot;, \u0026quot;http://f1361db2.m.daocloud.io\u0026quot;, \u0026quot;https://registry.docker-cn.com\u0026quot; ] } EOF sudo systemctl daemon-reload sudo systemctl restart docker  Docker 中国官方镜像\nhttps://registry.docker-cn.com\nDocker Hub\nDaoCloud 镜像站\nhttp://f1361db2.m.daocloud.io\n可登录，系统分配\nDocker Hub\nAzure 中国镜像\nhttps://dockerhub.azk8s.cn\nDocker Hub、GCR、Quay\n科大镜像站\nhttps://docker.mirrors.ustc.edu.cn\nDocker Hub、GCR、Quay\n阿里云\nhttps://\u0026lt;your_code\u0026gt;.mirror.aliyuncs.com\n需登录，系统分配\nDocker Hub\n七牛云\nhttps://reg-mirror.qiniu.com\nDocker Hub、GCR、Quay\n网易云\nhttps://hub-mirror.c.163.com\nDocker Hub\n腾讯云\nhttps://mirror.ccs.tencentyun.com\nDocker Hub\n检查加速器是否生效 命令行执行 docker info，如果从结果中看到了如下内容，说明配置成功。\nRegistry Mirrors: [...] https://registry.docker-cn.com/  ","date":"2020-10-30","permalink":"https://richard-chen93.github.io/post/%E5%90%84%E7%A7%8D%E9%98%BF%E9%87%8C%E4%BA%91%E5%8A%A0%E9%80%9F%E5%99%A8/","tags":null,"title":"各种阿里云加速器"},{"content":"linux更改 ssh 私钥 Passphrase $ cd ~/.ssh $ ssh-keygen -f id_rsa -p  ssh连接速度慢 修改sshd_config文件： UseDNS no GSSAPIAuthentication no\n实现免密登陆 1、在客户端生成密钥对,默认在~/.ssh文件夹下 ssh-keygen 2、将公钥上传到服务器 ssh-copy-id root@10.0.0.1 3、验证。\n","date":"2020-10-29","permalink":"https://richard-chen93.github.io/post/ssh/","tags":null,"title":"ssh"},{"content":"docker-compose\n1.安装扩展源\nsudo yum -y install epel-release\n2.安装python-pip模块\nsudo yum install python-pip\n3.查看docker-compose版本\ndocker-compose version\n提示未找到命令 4.通过命令进行安装\ncd /usr/local/bin/\nwget https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-Linux-x86_64\nrename docker-compose-Linux-x86_64 docker-compose docker-compose-Linux-x86_64\nchmod +x /usr/local/bin/docker-compose\n5.再通过docker-compose version命令进行查看\n","date":"2020-10-29","permalink":"https://richard-chen93.github.io/post/docker-compose%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","tags":null,"title":"Docker Compose"},{"content":"Git中submodule的使用\n面对比较复杂的项目，我们有可能会将代码根据功能拆解成不同的子模块。主项目对子模块有依赖关系，却又并不关心子模块的内部开发流程细节。\n这种情况下，通常不会把所有源码都放在同一个 Git 仓库中。\n有一种比较简单的方式，是在当前工作目录下，将子模块文件夹加入到 .gitignore 文件内容中，这样主项目就能够无视子项目的存在。这样做有一个弊端就是，使用主项目的人需要有一个先验知识：需要在当前目录下放置一份某版本的子模块代码。\n还有另外一种方式可供借鉴，可以使用 Git 的 submodule 功能，也是这篇文章的主题。\n实际上 Git 工具的 submodule 功能就是建立了当前项目与子模块之间的依赖关系：子模块路径、子模块的远程仓库、子模块的版本号。\n使用流程 假定我们有两个项目：project-main 和 project-sub-1，其中 project-main 表示主项目，而 project-sub-1 表示子模块项目。\n其中 project-main 的远程仓库地址为 https://github.com/username/project-main.git，而 project-sub-1 的远程仓库地址为 https://github.com/username/project-sub-1.git。\n接下来，我们希望在 project-main 中添加 project-sub-1 ，而又保持 project-sub-1 自身独立的版本控制。\n1.创建 submodule 使用 git submodule add \u0026lt;submodule_url\u0026gt; 命令可以在项目中创建一个子模块。\n进入项目 project-main ，输入：\n➜ project-main git:(master) git submodule add https://github.com/username/project-sub-1.git 正克隆到 \u0026lsquo;/path/to/project-main/project-sub-1\u0026rsquo;\u0026hellip; remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 展开对象中: 100% (3/3), 完成. 此时项目仓库中会多出两个文件：.gitmodules 和 project-sub-1 。\n前者的内容是这样的，事实上就是子模块的相关信息；而后者那个文件，实际上保存的是子模块当前版本的版本号信息。\n[submodule \u0026ldquo;project-sub-1\u0026rdquo;] path = project-sub-1 url = https://github.com/username/project-sub-1.git 如果此前项目中已经存在 .gitmodules 文件，则会在文件内容中多出上述三行记录。\n事实上，此时在 .git/config 文件中也会多出一些信息，在 .git/modules 文件夹下也会多出一份内容。\n通常此时可以使用 git commit -m \u0026ldquo;add submodule xxx\u0026rdquo; 提交一次，表示引入了某个子模块。提交后，在主项目仓库中，会显示出子模块文件夹，并带上其所在仓库的版本号。\n2.获取 submodule 上述步骤在创建子模块的过程中，会自动将相关代码克隆到对应路径，但对于后续使用者而言，对于主项目使用普通的 clone 操作并不会拉取到子模块中的实际代码。\n使用以下命令进行克隆，完成后 project-main/project-sub-1 文件夹是空的：\ncd /path/to/temp git clone https://github.com/username/project-main.git\n如果希望子模块代码也获取到，一种方式是在克隆主项目的时候带上参数 \u0026ndash;recurse-submodules，这样会递归地将项目中所有子模块的代码拉取。\ncd /path/to/temp2 git clone https://github.com/username/project-main.git \u0026ndash;recurse-submodules 此时 project-main/project-sub-1 文件夹是有内容的，并且固定在某个 Git 提交的版本上。\n另外一种可行的方式是，在当前主项目中执行：\ngit submodule init git submodule update 则会根据主项目的配置信息，拉取更新子模块中的代码。\n3.子模块内容的更新 对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。\n对于主项目而言，子模块的内容发生变动时，通常有三种情况：\n1）当前项目下子模块文件夹内的内容发生了未跟踪的内容变动；\n2）当前项目下子模块文件夹内的内容发生了版本变化；\n3）当前项目下子模块文件夹内的内容没变，远程有更新；\n 情况1：子模块有未跟踪的内容变动 对于第1种情况，通常是在开发环境中，直接修改子模块文件夹中的代码导致的。\n 此时在主项目中使用 git status 能够看到关于子模块尚未暂存以备提交的变更，但是于主项目而言是无能为力的，使用 git add/commit 对其也不会产生影响。\n➜ project-main git:(master) git status 位于分支 master 您的分支与上游分支 \u0026lsquo;origin/master\u0026rsquo; 一致。 尚未暂存以备提交的变更： （使用 \u0026ldquo;git add \u0026lt;文件\u0026gt;\u0026hellip;\u0026rdquo; 更新要提交的内容） （使用 \u0026ldquo;git checkout \u0026ndash; \u0026lt;文件\u0026gt;\u0026hellip;\u0026rdquo; 丢弃工作区的改动） （提交或丢弃子模组中未跟踪或修改的内容） 修改： project-sub-1 (未跟踪的内容) 修改尚未加入提交（使用 \u0026ldquo;git add\u0026rdquo; 和/或 \u0026ldquo;git commit -a\u0026rdquo;） 在此情景下，通常需要进入子模块文件夹，按照子模块内部的版本控制体系提交代码。\n当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。\n 情况2：子模块有版本变化 当子模块版本变化时，在主项目中使用 git status 查看仓库状态时，会显示子模块有新的提交：\n ➜ project-main git:(master) ✗ git status 位于分支 master 您的分支与上游分支 \u0026lsquo;origin/master\u0026rsquo; 一致。 尚未暂存以备提交的变更： （使用 \u0026ldquo;git add \u0026lt;文件\u0026gt;\u0026hellip;\u0026rdquo; 更新要提交的内容） （使用 \u0026ldquo;git checkout \u0026ndash; \u0026lt;文件\u0026gt;\u0026hellip;\u0026rdquo; 丢弃工作区的改动） 修改： project-sub-1 (新提交) 修改尚未加入提交（使用 \u0026ldquo;git add\u0026rdquo; 和/或 \u0026ldquo;git commit -a\u0026rdquo;） 在这种情况下，可以使用 git add/commit 将其添加到主项目的代码提交中，实际的改动就是那个子模块 文件 所表示的版本信息：\ngit diff HEAD HEAD^ diff \u0026ndash;git a/project-sub-1 b/project-sub-1 index ace9770..7097c48 160000 \u0026mdash; a/project-sub-1 +++ b/project-sub-1 @@ -1 +1 @@ -Subproject commit ace977071f94f4f88935f9bb9a33ac0f8b4ba935 +Subproject commit 7097c4887798b71cee360e99815f7dbd1aa17eb4 通常当子项目更新后，主项目修改其所依赖的版本时，会产生类似这种情景的 commit 提交信息。\n 情况3：子模块远程有更新 通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。\n 在这种情况下，主项目是比较茫然的。\n之前曾经提到，主项目可以使用 git submodule update 更新子模块的代码，但那是指 当前主项目文件夹下的子模块目录内容 与 当前主项目记录的子模块版本 不一致时，会参考后者进行更新。\n但如今这种情况下，后者 当前主项目记录的子模块版本 还没有变化，在主项目看来当前情况一切正常。\n此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。\n通常流程是：\ncd project-sub-1 git pull origin master 子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。\n当主项目的子项目特别多时，可能会不太方便，此时可以使用 git submodule 的一个命令 foreach 执行：\ngit submodule foreach \u0026lsquo;git pull origin master\u0026rsquo;\n 情况汇总 终上所述，可知在不同场景下子模块的更新方式如下：\n 对于子模块，只需要管理好自己的版本，并推送到远程分支即可； 对于父模块，若子模块版本信息未提交，需要更新子模块目录下的代码，并执行 commit 操作提交子模块版本信息； 对于父模块，若子模块版本信息已提交，需要使用 git submodule update ，Git 会自动根据子模块版本信息更新所有子模块目录的相关代码。\n4.删除子模块 网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 .gitmodules、.git/config 和 .git/modules 内容。包含了一大堆类似git rm \u0026ndash;cached 、rm -rf 、rm .gitmodules 和 git rm \u0026ndash;cached 之类的代码。\n实际上这是一种比较野的做法，不建议使用。\n根据官方文档的说明，应该使用 git submodule deinit 命令卸载一个子模块。这个命令如果添加上参数 \u0026ndash;force，则子模块工作区内即使有本地的修改，也会被移除。\ngit submodule deinit project-sub-1 git rm project-sub-1 执行 git submodule deinit project-sub-1 命令的实际效果，是自动在 .git/config 中删除了以下内容：\n[submodule \u0026ldquo;project-sub-1\u0026rdquo;] url = https://github.com/username/project-sub-1.git 执行 git rm project-sub-1 的效果，是移除了 project-sub-1 文件夹，并自动在 .gitmodules 中删除了以下内容：\n[submodule \u0026ldquo;project-sub-1\u0026rdquo;] path = project-sub-1 url = https://github.com/username/project-sub-1.git 此时，主项目中关于子模块的信息基本已经删除（虽然貌似 .git/modules 目录下还有残余）：\n➜ project-main git:(master) ✗ gs 位于分支 master 您的分支与上游分支 \u0026lsquo;origin/master\u0026rsquo; 一致。 要提交的变更： （使用 \u0026ldquo;git reset HEAD \u0026lt;文件\u0026gt;\u0026hellip;\u0026rdquo; 以取消暂存） 修改： .gitmodules 删除： project-sub-1 可以提交代码：\ngit commit -m \u0026ldquo;delete submodule project-sub-1\u0026rdquo; 至此完成对子模块的删除。\n总结 当项目比较复杂，部分代码希望独立为子模块进行版本控制时，可以使用 git submodule 功能。\n使用 git submodule 功能时，主项目仓库并不会包含子模块的文件，只会保留一份子模块的配置信息及版本信息，作为主项目版本管理的一部分。\n本篇文章简单介绍了 git submodule 的添加和删除，以及项目开发过程中主项目与子模块不同状态时刻的操作方式。\n","date":"2020-10-29","permalink":"https://richard-chen93.github.io/post/submodule%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","tags":null,"title":"git Submodule"},{"content":"hugo本地创建、更新、删除文章后同步到gitpage的基本流程： 前提环境： public目录位于blog目录下，属于blog的子仓库submodule 使用命令 git submodule status可看到 注意 写文章后直接sh deploy.sh，不用单独运行hugo相关任何命令\n结论，改动blog仓库之前，确保public子仓库所有改动已提交 已push 问题： 如果仓库有子模块，任何情况下都先确保子模块commit和push以后，才可以同步父仓库？否则子模块就失效？\n1、写文章 在blog项目根目录下执行 hugo new post/test.md 创建了一个md文件 vim content/post/test.md 移除 draft: true这一行 否则草稿不会公开为文章\n2、发布文章到gitpage blog根目录下执行deploy.sh脚本，成功以后等待约1分钟，gitpage上即可看到更新后的内容\n3、修改、删除文章 只需要编辑或删除blog/content/post/下的md文件，然后再次在根目录执行deploy.sh脚本，即可同步到gitpage\n4、同步本地blog仓库文件到github 任何本地blog根目录的文件，包括content/post下的md文件，或者config.toml配置文件，更新后都可以执行second-push.sh，远端仓库立即生效。second-push.sh内容为（git add \u0026ndash;all . \u0026amp;\u0026amp; git commit -m \u0026ldquo;update\u0026rdquo; \u0026amp;\u0026amp; git push）\n5、其他 对md文章或config.toml做任何改动以后，首先需要执行deploy.sh。然后如有需求再执行second-push.sh\n其他：克隆此仓库 git clone git@github.com:richard-chen93/blog.git\n其他 待删除，可以尝试的命令： git submodule sync git submodule init git submodule update\n启动实时预览（本地预览网站效果） 写一篇文章生成一次会很繁琐，可以通过启动网站预览，实时监控页面的更改并刷新页面。 hugo server -D 参数： -D 输出包括标记为 draft: true 的草稿文章\n默认地址为 http://localhost:1313 如果 1313 端口被占用，会随机使用其他空端口。\n若换了新电脑，要在新电脑上发布文章  1、将blog克隆到本地  git clone git@github.com:richard-chen93/blog.git   2、进入blog根目录，删除public文件夹  rm -rf public   3、用以下命令设置子模块   git submodule init git submodule update git submodule status git submodule sync  此时执行deploy可能会报错： fatal: You are not currently on a branch. To push the history leading to the current (detached HEAD) state now, use\ngit push origin HEAD:\u0026lt;name-of-remote-branch\u0026gt;  可尝试下面的指令修复问题：(在blog目录或public目录下都做)\n git checkout main git push origin HEAD:main git push -f  如果再有如下报错：\nAuto-merging search/index.json CONFLICT (content): Merge conflict in search/index.json Auto-merging post/index.html Auto-merging index.html Auto-merging archives/index.html Automatic merge failed; fix conflicts and then commit the result.  这样处理：\ngit add search/index.json git commit -s git push  问题记录 执行 hugo \u0026ndash;cleanDestinationDir, 若blog仓库content/post下有删除的md文章，则public/post下对应的html文章也会同步删除。然后执行deploy.sh之后，git就会报错：\n # On branch main # Untracked files: # (use \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to # include in what will be # committed) # ../content/post/1.md nothing added to commit but untracked files present (use \u0026quot;git add\u0026quot; to track)  所以目前不要动public目录下的任何东西，更新文章只在blog下进行，再deploy到gitpage即可。\n","date":"2020-10-28","permalink":"https://richard-chen93.github.io/post/hugo%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/","tags":null,"title":"Hugo基本用法"},{"content":"将hugo静态博客网页部署到github上 1、选择gitpage的类型 2种github page：个人、项目。这里选个人。\n2、建立gitpage和hugo代码仓库 在github上以自己的用户名+github.io为名建立page的仓库，如我的用户名richard-chen93, 仓库名为richard-chen93.github.io 创建一个仓库用于存放hugo的代码，例如取名为blog。将此blog克隆至本地。将本地能正常运行的hugo站点文件拷贝到blog。 注意：新建立的github.io仓库（任何新建的仓库都建议先添加一个文件，比如readme.md）务必先提交一次再使用submodule。如现在github 页面上进入此仓库，随便新建任何一个文件，点提交。否则仓库可能无法使用或无法添加子仓库。\n3、删除public目录，建立页面文件的子仓库。 删除blog项目根目录下的public目录,并建立git子仓库\nrm -rf public git submodule add -b main git@github.com:richard-chen93/richard-chen93.github.io.git public  建立子仓库后，当你执行hugo命令，生成public下的页面文件时，public目录会有一个不同的远程源\n4、修改hugo配置文件 在hugo站点配置文件 config.toml中，baseurl设置为你的站点名称，如 https://richard-chen93.github.io\n5、部署脚本，直接拿来用 在blog根目录执行hugo.exe命令后，会在public文件夹生成页面文件。使用deploy.sh脚本即可推送到github上\n#!/bin/sh # If a command fails then the deploy stops set -e printf \u0026quot;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026quot; # Build the project. hugo ## if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026quot;rebuilding site $(date)\u0026quot; if [ -n \u0026quot;$*\u0026quot; ]; then msg=\u0026quot;$*\u0026quot; fi git commit -m \u0026quot;$msg\u0026quot; # Push source and build repos. git push origin master  可以使用deploy.sh ＋ commit message来提交\n至此几分钟后即可打开你的gitpage页面。 https://richard-chen93.github.io\n","date":"2020-10-27","permalink":"https://richard-chen93.github.io/post/deploy-hugo-site_on-github-pages/","tags":null,"title":"Deploy Hugo Site_on Github Pages"},{"content":"1 无法push A git directory for \u0026lsquo;public\u0026rsquo; is found locally with remote(s): origin https://github.com/richard-chen93/.........git If you want to reuse this local git directory instead of cloning again from https://github.com/richard-chen93/......git use the \u0026lsquo;\u0026ndash;force\u0026rsquo; option. If the local git directory is not the correct repo or you are unsure what this means choose another name with the \u0026lsquo;\u0026ndash;name\u0026rsquo; option.\n删除.git\\modules 的 public\n2 git push时总让输入密码 git push的时候每次都要输入用户名和密码的问题解决 换了个ssh key,发现每次git push origin master的时候都要输入用户名和密码 原因是在添加远程库的时候使用了https的方式。。所以每次都要用https的方式push到远程库 查看使用的传输协议: git remote -v\ngit remote rm origin git remote add origin git@github.com:username/repository.git git push -u origin master\ngit remote -v\n无法push git push -u origin master error: src refspec master does not match any error: failed to push some refs to \u0026lsquo;github.com:richard-chen93/hugo.git\u0026rsquo;\nreset \u0026ndash;hard：重置stage区和工作目录: reset \u0026ndash;hard 会在重置 HEAD 和branch的同时，重置stage区和工作目录里的内容。当你在 reset 后面加了 \u0026ndash;hard 参数时，你的stage区和工作目录里的内容会被完全重置为和HEAD的新位置相同的内容。换句话说，就是你的没有commit的修改会被全部擦掉。\n例如你在上次 commit 之后又对文件做了一些改动：把修改后的ganmes.txt文件add到stage区，修改后的shopping list.txt保留在工作目录\n05 git submodule add error: does not have a commit checked out 1、新建的仓库，要至少提交一次更改（比如直接在github web页面随便添加一个任何文件，然后点提交。） 2、删除public文件夹。\n06 fatal: You are not currently on a branch. To push the history leading to the current (detached HEAD) state now, use git push origin HEAD: 运行命令 git checkout main 即可解决\n07 如下报错：\nAuto-merging search/index.json CONFLICT (content): Merge conflict in search/index.json Auto-merging post/index.html Auto-merging index.html Auto-merging archives/index.html Automatic merge failed; fix conflicts and then commit the result.  处理方法：\ngit add search/index.json git commit -s git push  ","date":"2020-10-27","permalink":"https://richard-chen93.github.io/post/git%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/","tags":null,"title":"Git常见错误汇总"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot; /\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","date":"2020-05-11","permalink":"https://richard-chen93.github.io/post/markdown-syntax/","tags":["markdown","css","html","themes"],"title":"Markdown Syntax"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }}\r{{ partial \u0026quot;math.html\u0026quot; . }}\r{{ end }}\r  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions Examples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2020-03-08","permalink":"https://richard-chen93.github.io/post/math-typesetting/","tags":null,"title":"Math Typesetting"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09","permalink":"https://richard-chen93.github.io/post/placeholder-text/","tags":["markdown","text"],"title":"Placeholder Text"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n:s ee_no_evil:[Remove the space] 🙈 :h ear_no_evil:[Remove the space] 🙉 :s peak_no_evil:[Remove the space] 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji {\rfont-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;\r}\r","date":"2019-03-05","permalink":"https://richard-chen93.github.io/post/emoji-support/","tags":["emoji"],"title":"Emoji Support"},{"content":"The following is part of the CJK text, this page is for test use only.\nCJK Radicals Supplement ⺀ ⺁ ⺂ ⺃ ⺄ ⺅ ⺆ ⺇ ⺈ ⺉ ⺊ ⺋ ⺌ ⺍ ⺎ ⺏ ⺐ ⺑ ⺒ ⺓ ⺔ ⺕ ⺖ ⺗ ⺘ ⺙ ⺛ ⺜ ⺝ ⺞ ⺟ ⺠ ⺡ ⺢ ⺣ ⺤ ⺥ ⺦ ⺧ ⺨ ⺩ ⺪ ⺫ ⺬ ⺭ ⺮ ⺯ ⺰ ⺱ ⺲ ⺳ ⺴ ⺵ ⺶ ⺷ ⺸ ⺹ ⺺ ⺻ ⺼ ⺽ ⺾ ⺿ ⻀ ⻁ ⻂ ⻃ ⻄ ⻅ ⻆ ⻇ ⻈ ⻉ ⻊ ⻋ ⻌ ⻍ ⻎ ⻏ ⻐ ⻑ ⻒ ⻓ ⻔ ⻕ ⻖ ⻗ ⻘ ⻙ ⻚ ⻛ ⻜ ⻝ ⻞ ⻟ ⻠ ⻡ ⻢ ⻣ ⻤ ⻥ ⻦ ⻧ ⻨ ⻩ ⻪ ⻫ ⻬ ⻭ ⻮ ⻯ ⻰ ⻱ ⻲ ⻳\nKangxi Radicals ⼀ ⼁ ⼂ ⼃ ⼄ ⼅ ⼆ ⼇ ⼈ ⼉ ⼊ ⼋ ⼌ ⼍ ⼎ ⼏ ⼐ ⼑ ⼒ ⼓ ⼔ ⼕ ⼖ ⼗ ⼘ ⼙ ⼚ ⼛ ⼜ ⼝ ⼞ ⼟ ⼠ ⼡ ⼢ ⼣ ⼤ ⼥ ⼦ ⼧ ⼨ ⼩ ⼪ ⼫ ⼬ ⼭ ⼮ ⼯ ⼰ ⼱ ⼲ ⼳ ⼴ ⼵ ⼶ ⼷ ⼸ ⼹ ⼺ ⼻ ⼼ ⼽ ⼾ ⼿ ⽀ ⽁ ⽂ ⽃ ⽄ ⽅ ⽆ ⽇ ⽈ ⽉ ⽊ ⽋ ⽌ ⽍ ⽎ ⽏ ⽐ ⽑ ⽒ ⽓ ⽔ ⽕ ⽖ ⽗ ⽘ ⽙ ⽚ ⽛ ⽜ ⽝ ⽞ ⽟ ⽠ ⽡ ⽢ ⽣ ⽤ ⽥ ⽦ ⽧ ⽨ ⽩ ⽪ ⽫ ⽬ ⽭ ⽮ ⽯ ⽰ ⽱ ⽲ ⽳ ⽴ ⽵ ⽶ ⽷ ⽸ ⽹ ⽺ ⽻ ⽼ ⽽ ⽾ ⽿ \u0026hellip;\nCJK Symbols and Punctuation 、 。 〃 〄 々 〆 〇 〈 〉 《 》 「 」 『 』 【 】 〒 〓 〔 〕 〖 〗 〘 〙 〚 〛 〜 〝 〞 〟 〠 〡 〢 〣 〤 〥 〦 〧 〨 〩 〪 〫 〬 〭 〮 〯 〰 〱 〲 〳 〴 〵 〶 〷 〸 〹 〺 〻 〼 〽 〾 〿\nHiragana ぁ あ ぃ い ぅ う ぇ え ぉ お か が き ぎ く ぐ け げ こ ご さ ざ し じ す ず せ ぜ そ ぞ た だ ち ぢ っ つ づ て で と ど な に ぬ ね の は ば ぱ ひ び ぴ ふ ぶ ぷ へ べ ぺ ほ ぼ ぽ ま み む め も ゃ や ゅ ゆ ょ よ ら り る れ ろ ゎ わ ゐ ゑ を ん ゔ ゕ ゖ ゙ ゚ ゛ ゜ ゝ ゞ ゟ\nKatakana ゠ ァ ア ィ イ ゥ ウ ェ エ ォ オ カ ガ キ ギ ク グ ケ ゲ コ ゴ サ ザ シ ジ ス ズ セ ゼ ソ ゾ タ ダ チ ヂ ッ ツ ヅ テ デ ト ド ナ ニ ヌ ネ ノ ハ バ パ ヒ ビ ピ フ ブ プ ヘ ベ ペ ホ ボ ポ マ ミ ム メ モ ャ ヤ ュ ユ ョ ヨ ラ リ ル レ ロ ヮ ワ ヰ ヱ ヲ ン ヴ ヵ ヶ ヷ ヸ ヹ ヺ ・ ー ヽ ヾ ヿ\nBopomofo ㄅ ㄆ ㄇ ㄈ ㄉ ㄊ ㄋ ㄌ ㄍ ㄎ ㄏ ㄐ ㄑ ㄒ ㄓ ㄔ ㄕ ㄖ ㄗ ㄘ ㄙ ㄚ ㄛ ㄜ ㄝ ㄞ ㄟ ㄠ ㄡ ㄢ ㄣ ㄤ ㄥ ㄦ ㄧ ㄨ ㄩ ㄪ ㄫ ㄬ\nHangul Compatibility Jamo ㄱ ㄲ ㄳ ㄴ ㄵ ㄶ ㄷ ㄸ ㄹ ㄺ ㄻ ㄼ ㄽ ㄾ ㄿ ㅀ ㅁ ㅂ ㅃ ㅄ ㅅ ㅆ ㅇ ㅈ ㅉ ㅊ ㅋ ㅌ ㅍ ㅎ ㅏ ㅐ ㅑ ㅒ ㅓ ㅔ ㅕ ㅖ ㅗ ㅘ ㅙ ㅚ ㅛ ㅜ ㅝ ㅞ ㅟ ㅠ ㅡ ㅢ ㅣ ㅤ ㅥ ㅦ ㅧ ㅨ ㅩ ㅪ ㅫ ㅬ ㅭ ㅮ ㅯ ㅰ ㅱ ㅲ ㅳ ㅴ ㅵ ㅶ ㅷ ㅸ ㅹ ㅺ ㅻ ㅼ ㅽ ㅾ ㅿ ㆀ ㆁ ㆂ ㆃ ㆄ ㆅ ㆆ ㆇ ㆈ ㆉ ㆊ ㆋ ㆌ ㆍ ㆎ\nKanbun ㆐ ㆑ ㆒ ㆓ ㆔ ㆕ ㆖ ㆗ ㆘ ㆙ ㆚ ㆛ ㆜ ㆝ ㆞ ㆟\nBopomofo Extended ㆠ ㆡ ㆢ ㆣ ㆤ ㆥ ㆦ ㆧ ㆨ ㆩ ㆪ ㆫ ㆬ ㆭ ㆮ ㆯ ㆰ ㆱ ㆲ ㆳ ㆴ ㆵ ㆶ ㆷ\nKatakana Phonetic Extensions ㇰ ㇱ ㇲ ㇳ ㇴ ㇵ ㇶ ㇷ ㇸ ㇹ ㇺ ㇻ ㇼ ㇽ ㇾ ㇿ\nEnclosed CJK Letters and Months ㈀ ㈁ ㈂ ㈃ ㈄ ㈅ ㈆ ㈇ ㈈ ㈉ ㈊ ㈋ ㈌ ㈍ ㈎ ㈏ ㈐ ㈑ ㈒ ㈓ ㈔ ㈕ ㈖ ㈗ ㈘ ㈙ ㈚ ㈛ ㈜ ㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈦ ㈧ ㈨ ㈩ ㈪ ㈫ ㈬ ㈭ ㈮ ㈯ ㈰ ㈱ ㈲ ㈳ ㈴ ㈵ ㈶ ㈷ ㈸ ㈹ ㈺ ㈻ ㈼ ㈽ ㈾ ㈿ ㉀ ㉁ ㉂ ㉃ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㉠ ㉡ ㉢ ㉣ ㉤ ㉥ ㉦ ㉧ ㉨ ㉩ ㉪ ㉫ ㉬ ㉭ ㉮ ㉯ ㉰ ㉱ ㉲ ㉳ ㉴ ㉵ ㉶ ㉷ ㉸ ㉹ ㉺ ㉻ ㉿ ㊀ ㊁ ㊂ ㊃ ㊄ ㊅ ㊆ ㊇ ㊈ ㊉ ㊊ ㊋ ㊌ ㊍ ㊎ ㊏ ㊐ ㊑ ㊒ \u0026hellip;\nCJK Compatibility ㌀ ㌁ ㌂ ㌃ ㌄ ㌅ ㌆ ㌇ ㌈ ㌉ ㌊ ㌋ ㌌ ㌍ ㌎ ㌏ ㌐ ㌑ ㌒ ㌓ ㌔ ㌕ ㌖ ㌗ ㌘ ㌙ ㌚ ㌛ ㌜ ㌝ ㌞ ㌟ ㌠ ㌡ ㌢ ㌣ ㌤ ㌥ ㌦ ㌧ ㌨ ㌩ ㌪ ㌫ ㌬ ㌭ ㌮ ㌯ ㌰ ㌱ ㌲ ㌳ ㌴ ㌵ ㌶ ㌷ ㌸ ㌹ ㌺ ㌻ ㌼ ㌽ ㌾ ㌿ ㍀ ㍁ ㍂ ㍃ ㍄ ㍅ ㍆ ㍇ ㍈ ㍉ ㍊ ㍋ ㍌ ㍍ ㍎ ㍏ ㍐ ㍑ ㍒ ㍓ ㍔ ㍕ ㍖ ㍗ ㍘ ㍙ ㍚ ㍛ ㍜ ㍝ ㍞ ㍟ ㍠ ㍡ ㍢ ㍣ ㍤ ㍥ ㍦ ㍧ ㍨ ㍩ ㍪ ㍫ ㍬ ㍭ ㍮ ㍯ ㍰ ㍱ ㍲ ㍳ ㍴ ㍵ ㍶ ㍻ ㍼ ㍽ ㍾ ㍿ ㎀ ㎁ ㎂ ㎃ \u0026hellip;\nCJK Unified Ideographs Extension A 㐀 㐁 㐂 㐃 㐄 㐅 㐆 㐇 㐈 㐉 㐊 㐋 㐌 㐍 㐎 㐏 㐐 㐑 㐒 㐓 㐔 㐕 㐖 㐗 㐘 㐙 㐚 㐛 㐜 㐝 㐞 㐟 㐠 㐡 㐢 㐣 㐤 㐥 㐦 㐧 㐨 㐩 㐪 㐫 㐬 㐭 㐮 㐯 㐰 㐱 㐲 㐳 㐴 㐵 㐶 㐷 㐸 㐹 㐺 㐻 㐼 㐽 㐾 㐿 㑀 㑁 㑂 㑃 㑄 㑅 㑆 㑇 㑈 㑉 㑊 㑋 㑌 㑍 㑎 㑏 㑐 㑑 㑒 㑓 㑔 㑕 㑖 㑗 㑘 㑙 㑚 㑛 㑜 㑝 㑞 㑟 㑠 㑡 㑢 㑣 㑤 㑥 㑦 㑧 㑨 㑩 㑪 㑫 㑬 㑭 㑮 㑯 㑰 㑱 㑲 㑳 㑴 㑵 㑶 㑷 㑸 㑹 㑺 㑻 㑼 㑽 㑾 㑿 \u0026hellip;\nCJK Unified Ideographs 一 丁 丂 七 丄 丅 丆 万 丈 三 上 下 丌 不 与 丏 丐 丑 丒 专 且 丕 世 丗 丘 丙 业 丛 东 丝 丞 丟 丠 両 丢 丣 两 严 並 丧 丨 丩 个 丫 丬 中 丮 丯 丰 丱 串 丳 临 丵 丶 丷 丸 丹 为 主 丼 丽 举 丿 乀 乁 乂 乃 乄 久 乆 乇 么 义 乊 之 乌 乍 乎 乏 乐 乑 乒 乓 乔 乕 乖 乗 乘 乙 乚 乛 乜 九 乞 也 习 乡 乢 乣 乤 乥 书 乧 乨 乩 乪 乫 乬 乭 乮 乯 买 乱 乲 乳 乴 乵 乶 乷 乸 乹 乺 乻 乼 乽 乾 乿 \u0026hellip;\nHangul Syllables 가 각 갂 갃 간 갅 갆 갇 갈 갉 갊 갋 갌 갍 갎 갏 감 갑 값 갓 갔 강 갖 갗 갘 같 갚 갛 개 객 갞 갟 갠 갡 갢 갣 갤 갥 갦 갧 갨 갩 갪 갫 갬 갭 갮 갯 갰 갱 갲 갳 갴 갵 갶 갷 갸 갹 갺 갻 갼 갽 갾 갿 걀 걁 걂 걃 걄 걅 걆 걇 걈 걉 걊 걋 걌 걍 걎 걏 걐 걑 걒 걓 걔 걕 걖 걗 걘 걙 걚 걛 걜 걝 걞 걟 걠 걡 걢 걣 걤 걥 걦 걧 걨 걩 걪 걫 걬 걭 걮 걯 거 걱 걲 걳 건 걵 걶 걷 걸 걹 걺 걻 걼 걽 걾 걿 \u0026hellip;\nCJK Compatibility Ideographs 豈 更 車 賈 滑 串 句 龜 龜 契 金 喇 奈 懶 癩 羅 蘿 螺 裸 邏 樂 洛 烙 珞 落 酪 駱 亂 卵 欄 爛 蘭 鸞 嵐 濫 藍 襤 拉 臘 蠟 廊 朗 浪 狼 郎 來 冷 勞 擄 櫓 爐 盧 老 蘆 虜 路 露 魯 鷺 碌 祿 綠 菉 錄 鹿 論 壟 弄 籠 聾 牢 磊 賂 雷 壘 屢 樓 淚 漏 累 縷 陋 勒 肋 凜 凌 稜 綾 菱 陵 讀 拏 樂 諾 丹 寧 怒 率 異 北 磻 便 復 不 泌 數 索 參 塞 省 葉 說 殺 辰 沈 拾 若 掠 略 亮 兩 凉 梁 糧 良 諒 量 勵 \u0026hellip;\nCJK Compatibility Forms ︰ ︱ ︲ ︳ ︴ ︵ ︶ ︷ ︸ ︹ ︺ ︻ ︼ ︽ ︾ ︿ ﹀ ﹁ ﹂ ﹃ ﹄ ﹅ ﹆ ﹉ ﹊ ﹋ ﹌ ﹍ ﹎ ﹏\n","date":"2018-03-09","permalink":"https://richard-chen93.github.io/post/cjk-unicode-test/","tags":["test","cjk"],"title":"CJK Unicode Test"},{"content":"本文内容无实际意义，由狗屁不通文章生成器自动生成，不代表作者本人观点。\n可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。一段代码写一天，到底应该如何实现。马克思在不经意间这样说过，一切节省，归根到底都归结为时间的节省。这不禁令我深思。马克思曾经说过，一切节省，归根到底都归结为时间的节省。\n带着这句话，我们还要更加慎重的审视这个问题：对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。既然如何，我们不得不面对一个非常尴尬的事实，那就是，亚伯拉罕·林肯曾经提到过，你活了多少岁不算什么，重要的是你是如何度过这些岁月的。这启发了我，了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。我认为，在这种困难的抉择下，本人思来想去，寝食难安。所谓一段代码写一天，关键是一段代码写一天需要如何写。裴斯泰洛齐在不经意间这样说过，今天应做的事没有做，明天再早也是耽误了。这句话语虽然很短，但令我浮想联翩。总结的来说，带着这些问题，我们来审视一下一段代码写一天。西班牙曾经说过，自知之明是最难得的知识。这不禁令我深思。可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。贝多芬在不经意间这样说过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。带着这句话，我们还要更加慎重的审视这个问题：在这种困难的抉择下，本人思来想去，寝食难安。问题的关键究竟为何？对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。\n每个人都不得不面对这些问题。在面对这种问题时，歌德曾经提到过，读一本好书，就如同和一个高尚的人在交谈。这似乎解答了我的疑惑。歌德在不经意间这样说过，读一本好书，就如同和一个高尚的人在交谈。我希望诸位也能好好地体会这句话。从这个角度来看，一段代码写一天的发生，到底需要如何做到，不一段代码写一天的发生，又会如何产生。可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。现在，解决一段代码写一天的问题，是非常非常重要的。所以，马克思曾经提到过，一切节省，归根到底都归结为时间的节省。这似乎解答了我的疑惑。一般来讲，我们都必须务必慎重的考虑考虑。阿卜·日·法拉兹曾经说过，学问是异常珍贵的东西，从任何源泉吸收都不可耻。我希望诸位也能好好地体会这句话。既然如此，就我个人来说，一段代码写一天对我的意义，不能不说非常重大。白哲特曾经说过，坚强的信念能赢得强者的心，并使他们变得更坚强。带着这句话，我们还要更加慎重的审视这个问题：富勒在不经意间这样说过，苦难磨炼一些人，也毁灭另一些人。带着这句话，我们还要更加慎重的审视这个问题：这样看来，一般来讲，我们都必须务必慎重的考虑考虑。从这个角度来看，从这个角度来看，这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。而这些并不是完全重要，更加重要的问题是。\n带着这些问题，我们来审视一下一段代码写一天。要想清楚，一段代码写一天，到底是一种怎么样的存在。经过上述讨论，生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。佚名曾经提到过，感激每一个新的挑战，因为它会锻造你的意志和品格。这句话语虽然很短，但令我浮想联翩。现在，解决一段代码写一天的问题，是非常非常重要的。所以，每个人都不得不面对这些问题。在面对这种问题时，我们都知道，只要有意义，那么就必须慎重考虑。经过上述讨论。\n了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。一般来说，了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。笛卡儿在不经意间这样说过，阅读一切好书如同和过去最杰出的人谈话。我希望诸位也能好好地体会这句话。在这种困难的抉择下，本人思来想去，寝食难安。问题的关键究竟为何？了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。莎士比亚曾经说过，抛弃时间的人，时间也抛弃他。我希望诸位也能好好地体会这句话。\n笛卡儿说过一句富有哲理的话，阅读一切好书如同和过去最杰出的人谈话。这句话语虽然很短，但令我浮想联翩。鲁巴金曾经提到过，读书是在别人思想的帮助下，建立起自己的思想。这启发了我，了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。一段代码写一天因何而发生？一段代码写一天因何而发生？我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。邓拓曾经说过，越是没有本领的就越加自命不凡。这启发了我，从这个角度来看，一般来讲，我们都必须务必慎重的考虑考虑。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。一般来说。\n对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。总结的来说，从这个角度来看，本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。德谟克利特说过一句富有哲理的话，节制使快乐增加并使享受加强。我希望诸位也能好好地体会这句话。生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。我们都知道，只要有意义，那么就必须慎重考虑。就我个人来说，一段代码写一天对我的意义，不能不说非常重大。史美尔斯曾经提到过，书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。这句话语虽然很短，但令我浮想联翩。一般来讲，我们都必须务必慎重的考虑考虑。既然如此，我们都知道，只要有意义，那么就必须慎重考虑。这样看来，就我个人来说，一段代码写一天对我的意义，不能不说非常重大。德国曾经提到过，只有在人群中间，才能认识自己。我希望诸位也能好好地体会这句话。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。\n所谓一段代码写一天，关键是一段代码写一天需要如何写。我们不得不面对一个非常尴尬的事实，那就是，从这个角度来看，可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。莎士比亚在不经意间这样说过，意志命运往往背道而驰，决心到最后会全部推倒。我希望诸位也能好好地体会这句话。一段代码写一天，到底应该如何实现。那么，一段代码写一天，到底应该如何实现。可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。一段代码写一天，发生了会如何，不发生又会如何。在这种困难的抉择下，本人思来想去，寝食难安。塞涅卡在不经意间这样说过，生命如同寓言，其价值不在与长短，而在与内容。这不禁令我深思。那么，生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。所谓一段代码写一天，关键是一段代码写一天需要如何写。我认为，所谓一段代码写一天，关键是一段代码写一天需要如何写。可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。一段代码写一天的发生，到底需要如何做到，不一段代码写一天的发生，又会如何产生。这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。在这种困难的抉择下，本人思来想去，寝食难安。带着这些问题，我们来审视一下一段代码写一天。一段代码写一天，到底应该如何实现。一段代码写一天，发生了会如何，不发生又会如何。既然如何，要想清楚，一段代码写一天，到底是一种怎么样的存在。那么，生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。总结的来说，那么，带着这些问题，我们来审视一下一段代码写一天。要想清楚，一段代码写一天，到底是一种怎么样的存在。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。我们不得不面对一个非常尴尬的事实，那就是，总结的来说，对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。一段代码写一天，发生了会如何，不发生又会如何。西班牙曾经提到过，自己的鞋子，自己知道紧在哪里。带着这句话，我们还要更加慎重的审视这个问题：既然如何，每个人都不得不面对这些问题。在面对这种问题时，问题的关键究竟为何？从这个角度来看，既然如此，在这种困难的抉择下，本人思来想去，寝食难安。我认为。\n一段代码写一天因何而发生？我们不得不面对一个非常尴尬的事实，那就是，洛克在不经意间这样说过，学到很多东西的诀窍，就是一下子不要学很多。这不禁令我深思。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。一般来说，而这些并不是完全重要，更加重要的问题是，问题的关键究竟为何？而这些并不是完全重要，更加重要的问题是，对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。一段代码写一天因何而发生？所谓一段代码写一天，关键是一段代码写一天需要如何写。一段代码写一天因何而发生？这样看来，一段代码写一天，到底应该如何实现。卡耐基说过一句富有哲理的话，一个不注意小事情的人，永远不会成就大事业。带着这句话，我们还要更加慎重的审视这个问题：一段代码写一天，到底应该如何实现。既然如此，而这些并不是完全重要，更加重要的问题是。\n冯学峰说过一句富有哲理的话，当一个人用工作去迎接光明，光明很快就会来照耀着他。我希望诸位也能好好地体会这句话。了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。而这些并不是完全重要，更加重要的问题是，那么，要想清楚，一段代码写一天，到底是一种怎么样的存在。从这个角度来看，一段代码写一天，发生了会如何，不发生又会如何。对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。在这种困难的抉择下，本人思来想去，寝食难安。我们都知道，只要有意义，那么就必须慎重考虑。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。问题的关键究竟为何？本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。鲁巴金曾经提到过，读书是在别人思想的帮助下，建立起自己的思想。这不禁令我深思。莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这启发了我。\n所谓一段代码写一天，关键是一段代码写一天需要如何写。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。海贝尔曾经说过，人生就是学校。在那里，与其说好的教师是幸福，不如说好的教师是不幸。这似乎解答了我的疑惑。德国曾经说过，只有在人群中间，才能认识自己。这不禁令我深思。这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。带着这些问题，我们来审视一下一段代码写一天。这样看来，了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。克劳斯·莫瑟爵士在不经意间这样说过，教育需要花费钱，而无知也是一样。这似乎解答了我的疑惑。对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。一般来讲，我们都必须务必慎重的考虑考虑。一般来讲，我们都必须务必慎重的考虑考虑。一段代码写一天因何而发生？对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。而这些并不是完全重要，更加重要的问题是，一般来讲，我们都必须务必慎重的考虑考虑。我们都知道，只要有意义，那么就必须慎重考虑。本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。博说过一句富有哲理的话，一次失败，只是证明我们成功的决心还够坚强。维这启发了我，从这个角度来看，问题的关键究竟为何？这样看来，既然如此，所谓一段代码写一天，关键是一段代码写一天需要如何写。可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。总结的来说，我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。经过上述讨论，史美尔斯说过一句富有哲理的话，书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。带着这句话，我们还要更加慎重的审视这个问题：在这种困难的抉择下，本人思来想去，寝食难安。在这种困难的抉择下，本人思来想去，寝食难安。冯学峰曾经说过，当一个人用工作去迎接光明，光明很快就会来照耀着他。这句话语虽然很短，但令我浮想联翩。\n所谓一段代码写一天，关键是一段代码写一天需要如何写。米歇潘在不经意间这样说过，生命是一条艰险的峡谷，只有勇敢的人才能通过。我希望诸位也能好好地体会这句话。问题的关键究竟为何？培根在不经意间这样说过，合理安排时间，就等于节约时间。这句话语虽然很短，但令我浮想联翩。吉格·金克拉说过一句富有哲理的话，如果你能做梦，你就能实现它。这启发了我，这样看来，既然如何，吉格·金克拉说过一句富有哲理的话，如果你能做梦，你就能实现它。这句话语虽然很短，但令我浮想联翩。所谓一段代码写一天，关键是一段代码写一天需要如何写。我们不得不面对一个非常尴尬的事实，那就是，在这种困难的抉择下，本人思来想去，寝食难安。要想清楚，一段代码写一天，到底是一种怎么样的存在。了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。我们不得不面对一个非常尴尬的事实，那就是，了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。所谓一段代码写一天，关键是一段代码写一天需要如何写。而这些并不是完全重要，更加重要的问题是，左拉在不经意间这样说过，生活的道路一旦选定，就要勇敢地走到底，决不回头。这似乎解答了我的疑惑。一般来讲，我们都必须务必慎重的考虑考虑。一般来说，经过上述讨论，总结的来说，一般来讲，我们都必须务必慎重的考虑考虑。这样看来，既然如此，一般来说，一段代码写一天，发生了会如何，不发生又会如何。那么，既然如此，每个人都不得不面对这些问题。在面对这种问题时，莎士比亚曾经提到过，本来无望的事，大胆尝试，往往能成功。带着这句话，我们还要更加慎重的审视这个问题：韩非在不经意间这样说过，内外相应，言行相称。这似乎解答了我的疑惑。杰纳勒尔·乔治·S·巴顿说过一句富有哲理的话，接受挑战，就可以享受胜利的喜悦。这不禁令我深思。我们不得不面对一个非常尴尬的事实，那就是，总结的来说，现在，解决一段代码写一天的问题，是非常非常重要的。所以，我们不得不面对一个非常尴尬的事实，那就是，我认为，就我个人来说，一段代码写一天对我的意义，不能不说非常重大。我们都知道，只要有意义，那么就必须慎重考虑。培根在不经意间这样说过，合理安排时间，就等于节约时间。带着这句话，我们还要更加慎重的审视这个问题：可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。从这个角度来看，一般来讲，我们都必须务必慎重的考虑考虑。那么，所谓一段代码写一天，关键是一段代码写一天需要如何写。歌德曾经说过，意志坚强的人能把世界放在手中像泥块一样任意揉捏。带着这句话，我们还要更加慎重的审视这个问题：这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。一段代码写一天的发生，到底需要如何做到，不一段代码写一天的发生，又会如何产生。每个人都不得不面对这些问题。在面对这种问题时，就我个人来说，一段代码写一天对我的意义，不能不说非常重大。塞涅卡曾经提到过，生命如同寓言，其价值不在与长短，而在与内容。这句话语虽然很短，但令我浮想联翩。\n我们都知道，只要有意义，那么就必须慎重考虑。带着这些问题，我们来审视一下一段代码写一天。笛卡儿曾经说过，我的努力求学没有得到别的好处，只不过是愈来愈发觉自己的无知。带着这句话，我们还要更加慎重的审视这个问题：现在，解决一段代码写一天的问题，是非常非常重要的。所以，本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。迈克尔·F·斯特利曾经提到过，最具挑战性的挑战莫过于提升自我。这启发了我，现在，解决一段代码写一天的问题，是非常非常重要的。所以，既然如何，我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。易卜生说过一句富有哲理的话，伟大的事业，需要决心，能力，组织和责任感。带着这句话，我们还要更加慎重的审视这个问题：我们都知道，只要有意义，那么就必须慎重考虑。一段代码写一天，发生了会如何，不发生又会如何。带着这些问题，我们来审视一下一段代码写一天。我们不得不面对一个非常尴尬的事实，那就是，我们不得不面对一个非常尴尬的事实，那就是。\n我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。而这些并不是完全重要，更加重要的问题是，而这些并不是完全重要，更加重要的问题是，在这种困难的抉择下，本人思来想去，寝食难安。在这种困难的抉择下，本人思来想去，寝食难安。我们不得不面对一个非常尴尬的事实，那就是，现在，解决一段代码写一天的问题，是非常非常重要的。所以，俾斯麦说过一句富有哲理的话，失败是坚忍的最后考验。带着这句话，我们还要更加慎重的审视这个问题：可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。达·芬奇在不经意间这样说过，大胆和坚定的决心能够抵得上武器的精良。这似乎解答了我的疑惑。一段代码写一天的发生，到底需要如何做到，不一段代码写一天的发生，又会如何产生。而这些并不是完全重要，更加重要的问题是，我认为，总结的来说，可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。\n问题的关键究竟为何？我们不得不面对一个非常尴尬的事实，那就是，生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。我认为，这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。带着这些问题，我们来审视一下一段代码写一天。一段代码写一天的发生，到底需要如何做到，不一段代码写一天的发生，又会如何产生。问题的关键究竟为何？从这个角度来看，我们都知道，只要有意义，那么就必须慎重考虑。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。那么，这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。既然如何，从这个角度来看，带着这些问题，我们来审视一下一段代码写一天。一段代码写一天，发生了会如何，不发生又会如何。\n培根在不经意间这样说过，要知道对好事的称颂过于夸大，也会招来人们的反感轻蔑和嫉妒。这句话语虽然很短，但令我浮想联翩。这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。既然如何，而这些并不是完全重要，更加重要的问题是，这样看来，贝多芬曾经提到过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。这不禁令我深思。就我个人来说，一段代码写一天对我的意义，不能不说非常重大。一段代码写一天，发生了会如何，不发生又会如何。问题的关键究竟为何？卡耐基在不经意间这样说过，我们若已接受最坏的，就再没有什么损失。我希望诸位也能好好地体会这句话。一段代码写一天的发生，到底需要如何做到，不一段代码写一天的发生，又会如何产生。现在，解决一段代码写一天的问题，是非常非常重要的。所以，要想清楚，一段代码写一天，到底是一种怎么样的存在。爱迪生曾经说过，失败也是我需要的，它和成功对我一样有价值。我希望诸位也能好好地体会这句话。既然如何，对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。海贝尔说过一句富有哲理的话，人生就是学校。在那里，与其说好的教师是幸福，不如说好的教师是不幸。我希望诸位也能好好地体会这句话。\n这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。经过上述讨论，我认为，莫扎特曾经提到过，谁和我一样用功，谁就会和我一样成功。这句话语虽然很短，但令我浮想联翩。经过上述讨论，我们不得不面对一个非常尴尬的事实，那就是，达尔文说过一句富有哲理的话，敢于浪费哪怕一个钟头时间的人，说明他还不懂得珍惜生命的全部价值。这句话语虽然很短，但令我浮想联翩。本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。一般来讲，我们都必须务必慎重的考虑考虑。罗曼·罗兰曾经说过，只有把抱怨环境的心情，化为上进的力量，才是成功的保证。这启发了我，而这些并不是完全重要，更加重要的问题是，总结的来说，这样看来，每个人都不得不面对这些问题。在面对这种问题时，一般来讲，我们都必须务必慎重的考虑考虑。既然如此，总结的来说，可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。\n德国曾经提到过，只有在人群中间，才能认识自己。带着这句话，我们还要更加慎重的审视这个问题：既然如此，了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。杰纳勒尔·乔治·S·巴顿曾经提到过，接受挑战，就可以享受胜利的喜悦。这不禁令我深思。一段代码写一天因何而发生？问题的关键究竟为何？海贝尔曾经提到过，人生就是学校。在那里，与其说好的教师是幸福，不如说好的教师是不幸。带着这句话，我们还要更加慎重的审视这个问题。\n经过上述讨论，我们都知道，只要有意义，那么就必须慎重考虑。本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。我认为，一般来说，经过上述讨论，我认为，生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。就我个人来说，一段代码写一天对我的意义，不能不说非常重大。问题的关键究竟为何？一段代码写一天因何而发生？莎士比亚曾经提到过，本来无望的事，大胆尝试，往往能成功。这似乎解答了我的疑惑。这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。一段代码写一天，到底应该如何实现。我们都知道，只要有意义，那么就必须慎重考虑。总结的来说，那么，叔本华在不经意间这样说过，普通人只想到如何度过时间，有才能的人设法利用时间。这句话语虽然很短，但令我浮想联翩。总结的来说，经过上述讨论，从这个角度来看，一段代码写一天，发生了会如何，不发生又会如何。总结的来说，所谓一段代码写一天，关键是一段代码写一天需要如何写。既然如何，一段代码写一天，到底应该如何实现。\n问题的关键究竟为何？一般来讲，我们都必须务必慎重的考虑考虑。歌德说过一句富有哲理的话，读一本好书，就如同和一个高尚的人在交谈。这不禁令我深思。迈克尔·F·斯特利曾经提到过，最具挑战性的挑战莫过于提升自我。这不禁令我深思。在这种困难的抉择下，本人思来想去，寝食难安。生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。要想清楚，一段代码写一天，到底是一种怎么样的存在。莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这句话语虽然很短，但令我浮想联翩。\n这样看来，每个人都不得不面对这些问题。在面对这种问题时，从这个角度来看，现在，解决一段代码写一天的问题，是非常非常重要的。所以，我们不得不面对一个非常尴尬的事实，那就是，富兰克林曾经提到过，读书是易事，思索是难事，但两者缺一，便全无用处。这句话语虽然很短，但令我浮想联翩。我们都知道，只要有意义，那么就必须慎重考虑。康德曾经说过，既然我已经踏上这条道路，那么，任何东西都不应妨碍我沿着这条路走下去。我希望诸位也能好好地体会这句话。一段代码写一天，到底应该如何实现。而这些并不是完全重要，更加重要的问题是，而这些并不是完全重要，更加重要的问题是，生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。一般来讲，我们都必须务必慎重的考虑考虑。带着这些问题，我们来审视一下一段代码写一天。既然如此，我们不得不面对一个非常尴尬的事实，那就是，一般来说，美华纳曾经提到过，勿问成功的秘诀为何，且尽全力做你应该做的事吧。这句话语虽然很短，但令我浮想联翩。我们都知道，只要有意义，那么就必须慎重考虑。叔本华曾经说过，意志是一个强壮的盲人，倚靠在明眼的跛子肩上。我希望诸位也能好好地体会这句话。对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。既然如此，郭沫若曾经说过，形成天才的决定因素应该是勤奋。我希望诸位也能好好地体会这句话。生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。一般来讲，我们都必须务必慎重的考虑考虑。在这种困难的抉择下，本人思来想去，寝食难安。经过上述讨论，一段代码写一天，发生了会如何，不发生又会如何。从这个角度来看，一段代码写一天因何而发生？了解清楚一段代码写一天到底是一种怎么样的存在，是解决一切问题的关键。既然如何。\n而这些并不是完全重要，更加重要的问题是，而这些并不是完全重要，更加重要的问题是，既然如何，要想清楚，一段代码写一天，到底是一种怎么样的存在。那么，那么，我认为，经过上述讨论，既然如此，对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。卡耐基曾经提到过，一个不注意小事情的人，永远不会成就大事业。这句话语虽然很短，但令我浮想联翩。黑塞曾经提到过，有勇气承担命运这才是英雄好汉。这似乎解答了我的疑惑。一般来说，雷锋在不经意间这样说过，自己活着，就是为了使别人过得更美好。这启发了我，一般来说，而这些并不是完全重要，更加重要的问题是。\n裴斯泰洛齐在不经意间这样说过，今天应做的事没有做，明天再早也是耽误了。这句话语虽然很短，但令我浮想联翩。爱迪生曾经说过，失败也是我需要的，它和成功对我一样有价值。带着这句话，我们还要更加慎重的审视这个问题：带着这些问题，我们来审视一下一段代码写一天。既然如此，富勒曾经提到过，苦难磨炼一些人，也毁灭另一些人。我希望诸位也能好好地体会这句话。培根说过一句富有哲理的话，深窥自己的心，而后发觉一切的奇迹在你自己。这似乎解答了我的疑惑。问题的关键究竟为何。\n既然如何，一般来讲，我们都必须务必慎重的考虑考虑。经过上述讨论，普列姆昌德曾经说过，希望的灯一旦熄灭，生活刹那间变成了一片黑暗。这不禁令我深思。总结的来说，在这种困难的抉择下，本人思来想去，寝食难安。杰纳勒尔·乔治·S·巴顿说过一句富有哲理的话，接受挑战，就可以享受胜利的喜悦。这启发了我，那么，在这种困难的抉择下，本人思来想去，寝食难安。那么，带着这些问题，我们来审视一下一段代码写一天。\n我认为，可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。生活中，若一段代码写一天出现了，我们就不得不考虑它出现了的事实。既然如何，黑塞曾经提到过，有勇气承担命运这才是英雄好汉。这不禁令我深思。杰纳勒尔·乔治·S·巴顿说过一句富有哲理的话，接受挑战，就可以享受胜利的喜悦。这似乎解答了我的疑惑。在这种困难的抉择下，本人思来想去，寝食难安。\n可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。拉罗什福科在不经意间这样说过，我们唯一不会改正的缺点是软弱。这不禁令我深思。既然如此，可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。一般来讲，我们都必须务必慎重的考虑考虑。对我个人而言，一段代码写一天不仅仅是一个重大的事件，还可能会改变我的人生。既然如此，史美尔斯曾经说过，书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。这不禁令我深思。现在，解决一段代码写一天的问题，是非常非常重要的。所以，一般来讲，我们都必须务必慎重的考虑考虑。现在，解决一段代码写一天的问题，是非常非常重要的。所以，一段代码写一天，到底应该如何实现。贝多芬曾经提到过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。这似乎解答了我的疑惑。阿卜·日·法拉兹曾经说过，学问是异常珍贵的东西，从任何源泉吸收都不可耻。这似乎解答了我的疑惑。我们不得不面对一个非常尴尬的事实，那就是。\n池田大作在不经意间这样说过，不要回避苦恼和困难，挺起身来向它挑战，进而克服它。这句话语虽然很短，但令我浮想联翩。叔本华在不经意间这样说过，意志是一个强壮的盲人，倚靠在明眼的跛子肩上。带着这句话，我们还要更加慎重的审视这个问题：一段代码写一天，发生了会如何，不发生又会如何。就我个人来说，一段代码写一天对我的意义，不能不说非常重大。一般来说，就我个人来说，一段代码写一天对我的意义，不能不说非常重大。一般来说，可是，即使是这样，一段代码写一天的出现仍然代表了一定的意义。\n","date":"2017-04-01","permalink":"https://richard-chen93.github.io/post/wtf-article/","tags":["test","wtf"],"title":"纯简体中文测试文章"}]